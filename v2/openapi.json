{
  "openapi": "3.0.2",
  "info": {
    "version": "2.0.0",
    "title": "ZenAPI",
    "description": "# Overview\n\nThis is the reference documentation for the Zenvia *REST-like* API. The API itself is based on resources that are represented by JSON format and are manipulated using the HTTP protocol.\n\n## Features\n\nYou can send messages through the [Zenvia-supported channels](#section/Supported-Channels).\n\nYou can also subscribe to events and receive them on a webhook of your choosing. The available events for each and every channel are:\n\n* Messages: Receive messages events for outgoing and/or incoming messages.\n* Messages status: Receive status updates for outgoing messages.\n\n## Pre-requisites\n\nBefore using this API you need the following:\n\n* **Zenvia Account**: create an account on [Zenvia platform's site](https://app.zenvia.com/)\n* **Integrations**: configure desired channels to send and/or receive messages on the [integrations page](https://app.zenvia.com/home/credentials)\n* **API Token**: create an API token on the [API console](https://app.zenvia.com/home/api)\n* **Webhook** (optional): receive messages by subscribing to events using [subscriptions API resources](#tag/Subscriptions)\n\nYou can use the [Sandbox](#section/Getting-started-with-Sandbox) to start using and testing this API immediately.\n\n## View your Usage Report\nYou can also access Zenvia platform to view your [Usage Report](https://app.zenvia.com/notifications/dashboard/api)\n\n# Getting started with Sandbox\n\nThe fastest way to begin utilizing this API is with our [Sandbox (available on the Zenvia platform)](https://app.zenvia.com/home/sandbox).\n\nAs you create your new Sandbox, you'll be guided step-by-step in order to start sending and receiving messages using your desired channel.\n\n[Click here and start sending and receiving messages using RCS, WhatsApp or SMS using this API.](https://app.zenvia.com/home/sandbox)\n\nYou are allowed to send test messages to phone numbers you've connected during a 24-hour period. Following that, you must reconnect your number by sending the keyword once again to continue using the Sandbox's features.\n\n# API versions\n\nAll notable changes to ZenAPI will be documented here.\n\n<!-- The format is based on Keep a Changelog: http://keepachangelog.com/en/1.0.0/ -->\n<!-- and this project adheres to Semantic Versioning: http://semver.org/spec/v2.0.0.html -->\n\nCurrently, the ZenAPI is on version v2.\n\n## v2 (current)\n\n### 2021-05-24\n\n* Added\n    * Added the referral section that indicates an advertisement was clicked by the user to the [message event](#section/MESSAGE) received by the webhook\n\n### 2020-10-27\n\n* Added\n    * Added RCS Channels sections.\n\n### 2020-09-24\n\n* Added\n    * Added message-batches: API to send messages in batch.\n\n### 2020-09-01\n\n* Breaking Changes\n    * Visitor not sent as a JSON within contents block. Instead, it's sent directly under the message object.\n    * Location is no longer used as JSON.\n    * Removed deprecated `channels` attribute from the template resource.\n\n## v1 (deprecated)\n\nYou can still check v1 version clicking <a target=\"_blank\" href=\"https://zenvia.github.io/zenvia-openapi-spec/v1/\">here</a>.\n\n\n### 2020-02-01\n\n* Added\n    * Added templates.\n    * Added reporting API.\n\n### 2020-01-01\n\n* Added\n    * Added Subscription section.\n    * Added WhatsApp, SMS, and Facebook Channels sections.\n\n# SDKs\n\nMake it simpler to use our API by integrating our SDK into your software.\n\nThese helper libraries are available on [Node](https://github.com/zenvia/zenvia-sdk-node) and [Java](https://github.com/zenvia/zenvia-sdk-java) programming languages and located on our [GitHub](https://github.com/zenvia) page.\n\n# HTTP Methods\n\nHTTP methods are used to manipulate resources. Though, as not all resources allow all HTTP operations, observeOK the reference of each resource below.\n\nMethods used with collection endpoints:\n\n| HTTP Method      | Operation                | Success HTTP status |\n|:-----------------|:-------------------------|:--------------------|\n| GET              | List collection items    | 200 - OK            |\n| POST             | Create a new item        | 200 - OK            |\n\nMethods used with item endpoints:\n\n| HTTP Method      | Operation                    | Success HTTP status |\n|:-----------------|:-----------------------------|:--------------------|\n| GET              | Retrieve one resource item   | 200 - OK            |\n| DELETE           | Delete one resource item     | 204 - No content    |\n| PATCH            | Update one resource item     | 200 - OK            |\n\nWhen an operation is executed successfully, the API will respond with a 2xx status code.\n\n# Error Handling\n\nWhen one error occurs, the API will return a 4xx or 5xx HTTP status code and the payload with an Error Object.\n\nThe error object obeys the follwing schema:\n\n<SchemaDefinition schemaRef=\"#/components/schemas/error.base\" />\n\nResponses error codes are detailed below.\n\n| Http Status Code | Code                 | Message                          | Retry request |\n|:-----------------|:---------------------|:---------------------------------|:--------------|\n| 400              | VALIDATION_ERROR     | Validation error                 | No            |\n| 401              | AUTHENTICATION_ERROR | No authorization token was found | No            |\n| 404              | NOT_FOUND            | Not found                        | No            |\n| 409              | DUPLICATED           | Entity already exists            | No            |\n| 500              | INTERNAL_ERROR       | Internal error                   | Yes           |\n\n# Authentication\n\n## Token\nTo use this API you need to send the API token in every request.\n\nThe token needs to be sent in the HTTP header 'X-API-TOKEN'.\n\nExample:\n```X-API-TOKEN: hKp94crjv9OF3UGrCpSXUJw1-UYHhRvLKNLt```\n\nGenerate your token on the [API console](https://app.zenvia.com/home/api) on Zenvia platform.\n\n## JWT\n\nThe JWT token is primarily used by front-end applications for user interactions.\n\nFor server-to-server integrations use the [token authentication](/#section/Authentication/TOKEN) approach.\n",
    "termsOfService": "https://zenvia.com/",
    "contact": {
      "name": "API Support",
      "email": "atendimento@zenvia.com",
      "url": "https://zenapi.zenvia.com/"
    },
    "license": {
      "name": "MIT",
      "url": "https://raw.githubusercontent.com/zenvia/zenvia-openapi-spec/master/LICENSE.md"
    },
    "x-logo": {
      "url": "https://zenvia-static.s3.amazonaws.com/brand/zenvia-brand-mark-regular.svg"
    }
  },
  "servers": [
    {
      "url": "https://api.zenvia.com/v2"
    }
  ],
  "paths": {
    "/message-batches": {
      "post": {
        "description": "Create batch",
        "tags": [
          "Message Batches"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "contacts": {
                    "type": "string",
                    "title": "Binary CSV File",
                    "description": "Binary csv file with recipients and variable values ​​when necessary."
                  },
                  "batch": {
                    "$ref": "#/components/schemas/batches.multipart-batch"
                  }
                },
                "required": [
                  "contacts",
                  "batch"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created batch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batches.multipart-batch"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash",
            "source": "curl \"https://api.zenvia.com/v2/message-batches\" \\\n-H \"X-API-TOKEN: YOUR_API_TOKEN\" \\\n-F 'batch={\n  \"name\": \"My batch name\",\n  \"channel\": \"sms\",\n  \"columnMapper\": {\n    \"recipient_header_name\": \"recipient_number_column\",\n    \"name\": \"recipient_name_column\",\n    \"protocol\": \"protocol_column\"\n  },\n  \"message\": {\n    \"from\": \"string\",\n    \"contents\": [{\n      \"type\": \"text\",\n      \"text\": \"Hello {{name}} your service protocol is number {{protocol}}\"\n    }]\n  }\n};type=application/json' \\\n-F 'contacts=@./contacts.csv;type=text/csv;filename=contacts.csv'\n"
          }
        ]
      }
    },
    "/channels/email/messages": {
      "post": {
        "description": "Send a E-Mail message",
        "tags": [
          "E-Mail"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.email"
              },
              "examples": {
                "email": {
                  "value": {
                    "from": "sender@zenvia.com",
                    "to": "recipient@zenvia.com",
                    "representative": {
                      "name": "Sender Name"
                    },
                    "contents": [
                      {
                        "type": "email",
                        "subject": "Re: Ticket 12345",
                        "attachments": [
                          {
                            "fileUrl": "https://zenvia.com/example1.pdf"
                          },
                          {
                            "fileUrl": "https://zenvia.com/example2.png"
                          }
                        ],
                        "cc": [
                          "cc1@zenvia.com",
                          "cc2@zenvia.com"
                        ],
                        "bcc": [
                          "bcc1@zenvia.com",
                          "bcc2@zenvia.com"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.email"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/channels/facebook/messages": {
      "post": {
        "description": "Send a Facebook message",
        "tags": [
          "Facebook"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.facebook"
              },
              "examples": {
                "text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hi Zenvia!"
                      }
                    ]
                  }
                },
                "file": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "file",
                        "fileUrl": "https://zenvia.br/zenvia-team.png",
                        "fileMimeType": "image/png",
                        "fileCaption": "Our pic :)",
                        "fileName": "team.png"
                      }
                    ]
                  }
                },
                "card": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "card",
                        "title": "Card from Zenvia",
                        "text": "This is our products",
                        "media": {
                          "url": "https://zenvia.br/zenvia-office.png",
                          "disposition": "ON_THE_TOP_MEDIUM_HEIGHT",
                          "caption": "Our amazing office!"
                        },
                        "buttons": [
                          {
                            "type": "link",
                            "text": "Site",
                            "url": "https://www.zenvia.com/"
                          }
                        ],
                        "quickReplyButtons": [
                          {
                            "type": "text",
                            "text": "Click here",
                            "payload": "success"
                          }
                        ]
                      }
                    ]
                  }
                },
                "carousel": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "carousel",
                        "cardWidth": "MEDIUM",
                        "cards": [
                          {
                            "title": "Card from Zenvia",
                            "text": "This is our products",
                            "media": {
                              "url": "https://zenvia.br/zenvia-office.png",
                              "disposition": "ON_THE_TOP_MEDIUM_HEIGHT",
                              "caption": "Our amazing office!"
                            },
                            "buttons": [
                              {
                                "type": "link",
                                "text": "Site",
                                "url": "https://www.zenvia.com/"
                              }
                            ],
                            "quickReplyButtons": [
                              {
                                "type": "text",
                                "text": "Click here",
                                "payload": "success"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                "replyable_text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "replyable_text",
                        "text": "Hi Zenvia!",
                        "quickReplyButtons": [
                          {
                            "type": "text",
                            "text": "Click here",
                            "payload": "success"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.facebook"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash",
            "source": "curl \"https://api.zenvia.com/v2/channels/facebook/messages\" \\\n-H \"Content-Type: application/json\" \\\n-H \"X-API-TOKEN: YOUR_API_TOKEN\" \\\n-d '{\n  \"from\": \"sender-identifier\",\n  \"to\": \"recipient-identifier\",\n  \"contents\": [{\n    \"type\": \"text\",\n    \"text\": \"Some text message\"\n  }]\n}'\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "const { post } = require('request-promise');\n\npost({\n  uri: 'https://api.zenvia.com/v2/channels/facebook/messages',\n  headers: {\n    'X-API-TOKEN': 'YOUR_API_TOKEN'\n  },\n  body: {\n    from: 'sender-identifier',\n    to: 'recipient-identifier',\n    contents: [{\n      type: 'text',\n      text: 'Some text message'\n    }]\n  },\n  json: true\n})\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js SDK",
            "source": "/**\n * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/facebook-send-text-message.js\n */\n\nimport { Client, TextContent } from '@zenvia/sdk';\n\nconst client = new Client('YOUR_API_TOKEN');\n\nconst facebook = client.getChannel('facebook');\n\nconst content = new TextContent('Some text message');\n\nfacebook.sendMessage('sender-identifier', 'recipient-identifier', content)\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "Java",
            "label": "Java SDK",
            "source": "import com.zenvia.api.sdk.client.Channel;\nimport com.zenvia.api.sdk.client.apache.Client;\nimport com.zenvia.api.sdk.contents.TextContent;\nimport com.zenvia.api.sdk.messages.Message;\n\npublic class FacebookSendTextMessage {\n\n  public static void main (String arg []) {\n    Client client = new Client(\"YOUR_API_TOKEN\");\n\n    Channel facebook = client.getChannel(\"facebook\");\n\n    TextContent content = new TextContent(\"Some text message\");\n\n    try {\n      Message response = facebook.sendMessage(\"sender-identifier\", \"recipient-identifier\", content);\n      System.out.println(\"Response: \" + response.toString());\n    } catch(Exception e) {\n      System.out.println(\"Error: \" + e.getMessage());\n    }\n  }\n\n}\n"
          }
        ]
      }
    },
    "/channels/gbm/messages": {
      "post": {
        "description": "Send a Google Business Messages message",
        "tags": [
          "Google Business Messages"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.gbm"
              },
              "examples": {
                "text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hi Zenvia!"
                      }
                    ]
                  }
                },
                "file": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "file",
                        "fileUrl": "https://zenvia.br/zenvia-team.png",
                        "fileMimeType": "image/png",
                        "fileCaption": "Our pic :)",
                        "fileName": "team.png"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.gbm"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash",
            "source": "curl \"https://api.zenvia.com/v2/channels/gbm/messages\" \\\n-H \"Content-Type: application/json\" \\\n-H \"X-API-TOKEN: YOUR_API_TOKEN\" \\\n-d '{\n  \"from\": \"sender-identifier\",\n  \"to\": \"recipient-identifier\",\n  \"contents\": [{\n    \"type\": \"text\",\n    \"text\": \"Some text message\"\n  }]\n}'\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "const { post } = require('request-promise');\n\npost({\n  uri: 'https://api.zenvia.com/v2/channels/gbm/messages',\n  headers: {\n    'X-API-TOKEN': 'YOUR_API_TOKEN'\n  },\n  body: {\n    from: 'sender-identifier',\n    to: 'recipient-identifier',\n    contents: [{\n      type: 'text',\n      text: 'Some text message'\n    }]\n  },\n  json: true\n})\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js SDK",
            "source": "/**\n * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/gbm-send-text-message.js\n */\n\nimport { Client, TextContent } from '@zenvia/sdk';\n\nconst client = new Client('YOUR_API_TOKEN');\n\nconst gbm = client.getChannel('gbm');\n\nconst content = new TextContent('Some text message');\n\nfacebook.sendMessage('sender-identifier', 'recipient-identifier', content)\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "Java",
            "label": "Java SDK",
            "source": "import com.zenvia.api.sdk.client.Channel;\nimport com.zenvia.api.sdk.client.apache.Client;\nimport com.zenvia.api.sdk.contents.TextContent;\nimport com.zenvia.api.sdk.messages.Message;\n\npublic class GBMSendTextMessage {\n\n  public static void main (String arg []) {\n    Client client = new Client(\"YOUR_API_TOKEN\");\n\n    Channel gbm = client.getChannel(\"gbm\");\n\n    TextContent content = new TextContent(\"Some text message\");\n\n    try {\n      Message response = gbm.sendMessage(\"sender-identifier\", \"recipient-identifier\", content);\n      System.out.println(\"Response: \" + response.toString());\n    } catch(Exception e) {\n      System.out.println(\"Error: \" + e.getMessage());\n    }\n  }\n\n}\n"
          }
        ]
      }
    },
    "/channels/instagram/messages": {
      "post": {
        "description": "Send a Instagram message",
        "tags": [
          "Instagram"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.instagram"
              },
              "examples": {
                "text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hi Zenvia!"
                      }
                    ]
                  }
                },
                "file": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "file",
                        "fileUrl": "https://zenvia.br/zenvia-team.png",
                        "fileMimeType": "image/png",
                        "fileCaption": "Our pic :)",
                        "fileName": "team.png"
                      }
                    ]
                  }
                },
                "replyable_text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "replyable_text",
                        "text": "Hi Zenvia!",
                        "quickReplyButtons": [
                          {
                            "type": "text",
                            "text": "Click here",
                            "payload": "success"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.instagram"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/channels/rcs/messages": {
      "post": {
        "description": "Send a RCS message",
        "tags": [
          "RCS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.rcs"
              },
              "examples": {
                "text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hi Zenvia!"
                      }
                    ]
                  }
                },
                "template": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "template",
                        "templateId": "template_id",
                        "fields": {
                          "name": "Jhon",
                          "product": "Zenvia Chat"
                        }
                      }
                    ]
                  }
                },
                "file": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "file",
                        "fileUrl": "https://zenvia.br/zenvia-team.png",
                        "fileMimeType": "image/png",
                        "fileCaption": "Our pic :)",
                        "fileName": "team.png"
                      }
                    ]
                  }
                },
                "card": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "card",
                        "title": "Card from Zenvia",
                        "text": "This is our products",
                        "media": {
                          "url": "https://zenvia.br/zenvia-office.png",
                          "disposition": "ON_THE_TOP_MEDIUM_HEIGHT",
                          "caption": "Our amazing office!"
                        },
                        "buttons": [
                          {
                            "type": "link",
                            "text": "Site",
                            "url": "https://www.zenvia.com/"
                          }
                        ],
                        "quickReplyButtons": [
                          {
                            "type": "text",
                            "text": "Click here",
                            "payload": "success"
                          }
                        ]
                      }
                    ]
                  }
                },
                "carousel": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "carousel",
                        "cardWidth": "MEDIUM",
                        "cards": [
                          {
                            "title": "Card from Zenvia",
                            "text": "This is our products",
                            "media": {
                              "url": "https://zenvia.br/zenvia-office.png",
                              "disposition": "ON_THE_TOP_MEDIUM_HEIGHT",
                              "caption": "Our amazing office!"
                            },
                            "buttons": [
                              {
                                "type": "link",
                                "text": "Site",
                                "url": "https://www.zenvia.com/"
                              }
                            ],
                            "quickReplyButtons": [
                              {
                                "type": "text",
                                "text": "Click here",
                                "payload": "success"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                "replyable_text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "replyable_text",
                        "text": "Hi Zenvia!",
                        "quickReplyButtons": [
                          {
                            "type": "text",
                            "text": "Click here",
                            "payload": "success"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.rcs"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/channels/sms/messages": {
      "post": {
        "description": "Send a SMS message",
        "tags": [
          "SMS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.sms"
              },
              "examples": {
                "text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hi Zenvia!"
                      }
                    ]
                  }
                },
                "template": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "template",
                        "templateId": "template_id",
                        "fields": {
                          "name": "Jhon",
                          "product": "Zenvia Chat"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.sms"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash",
            "source": "curl \"https://api.zenvia.com/v2/channels/sms/messages\" \\\n-H \"Content-Type: application/json\" \\\n-H \"X-API-TOKEN: YOUR_API_TOKEN\" \\\n-d '{\n  \"from\": \"sender-identifier\",\n  \"to\": \"recipient-identifier\",\n  \"contents\": [{\n    \"type\": \"text\",\n    \"text\": \"Some text message\"\n  }]\n}'\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "const { post } = require('request-promise');\n\npost({\n  uri: 'https://api.zenvia.com/v2/channels/sms/messages',\n  headers: {\n    'X-API-TOKEN': 'YOUR_API_TOKEN'\n  },\n  body: {\n    from: 'sender-identifier',\n    to: 'recipient-identifier',\n    contents: [{\n      type: 'text',\n      text: 'Some text message'\n    }]\n  },\n  json: true\n})\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js SDK",
            "source": "/**\n * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/sms-send-text-message.js\n */\n\nimport { Client, TextContent } from '@zenvia/sdk';\n\nconst client = new Client('YOUR_API_TOKEN');\n\nconst sms = client.getChannel('sms');\n\nconst content = new TextContent('Some text message');\n\nsms.sendMessage('sender-identifier', 'recipient-identifier', content)\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "Java",
            "label": "Java SDK",
            "source": "import com.zenvia.api.sdk.client.Channel;\nimport com.zenvia.api.sdk.client.apache.Client;\nimport com.zenvia.api.sdk.contents.TextContent;\nimport com.zenvia.api.sdk.messages.Message;\n\npublic class SmsSendTextMessage {\n\n  public static void main (String arg []) {\n    Client client = new Client(\"YOUR_API_TOKEN\");\n\n    Channel sms = client.getChannel(\"sms\");\n\n    TextContent content = new TextContent(\"Some text message\");\n\n    try {\n      Message response = sms.sendMessage(\"sender-identifier\", \"recipient-identifier\", content);\n      System.out.println(\"Response: \" + response.toString());\n    } catch(Exception e) {\n      System.out.println(\"Error: \" + e.getMessage());\n    }\n  }\n\n}\n"
          }
        ]
      }
    },
    "/channels/telegram/messages": {
      "post": {
        "description": "Send a Telegram message",
        "tags": [
          "Telegram"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.telegram"
              },
              "examples": {
                "text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hi Zenvia!"
                      }
                    ]
                  }
                },
                "file": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "file",
                        "fileUrl": "https://zenvia.br/zenvia-team.png",
                        "fileMimeType": "image/png",
                        "fileCaption": "Our pic :)",
                        "fileName": "team.png"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.telegram"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash",
            "source": "curl \"https://api.zenvia.com/v2/channels/telegram/messages\" \\\n-H \"Content-Type: application/json\" \\\n-H \"X-API-TOKEN: YOUR_API_TOKEN\" \\\n-d '{\n  \"from\": \"sender-identifier\",\n  \"to\": \"recipient-identifier\",\n  \"contents\": [{\n    \"type\": \"text\",\n    \"text\": \"Some text message\"\n  }]\n}'\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "const { post } = require('request-promise');\n\npost({\n  uri: 'https://api.zenvia.com/v2/channels/telegram/messages',\n  headers: {\n    'X-API-TOKEN': 'YOUR_API_TOKEN'\n  },\n  body: {\n    from: 'sender-identifier',\n    to: 'recipient-identifier',\n    contents: [{\n      type: 'text',\n      text: 'Some text message'\n    }]\n  },\n  json: true\n})\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js SDK",
            "source": "/**\n * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/telegram-send-text-message.js\n */\n\nimport { Client, TextContent } from '@zenvia/sdk';\n\nconst client = new Client('YOUR_API_TOKEN');\n\nconst telegram = client.getChannel('telegram');\n\nconst content = new TextContent('Some text message');\n\ntelegram.sendMessage('sender-identifier', 'recipient-identifier', content)\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "Java",
            "label": "Java SDK",
            "source": "import com.zenvia.api.sdk.client.Channel;\nimport com.zenvia.api.sdk.client.apache.Client;\nimport com.zenvia.api.sdk.contents.TextContent;\nimport com.zenvia.api.sdk.messages.Message;\n\npublic class TelegramSendTextMessage {\n\n  public static void main (String arg []) {\n    Client client = new Client(\"YOUR_API_TOKEN\");\n\n    Channel telegram = client.getChannel(\"telegram\");\n\n    TextContent content = new TextContent(\"Some text message\");\n\n    try {\n      Message response = telegram.sendMessage(\"sender-identifier\", \"recipient-identifier\", content);\n      System.out.println(\"Response: \" + response.toString());\n    } catch(Exception e) {\n      System.out.println(\"Error: \" + e.getMessage());\n    }\n  }\n\n}\n"
          }
        ]
      }
    },
    "/channels/voice/messages": {
      "post": {
        "description": "Send a Voice message",
        "tags": [
          "Voice"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.voice"
              },
              "examples": {
                "call_tts": {
                  "value": {
                    "from": "12345a123a1234a1a2a123a1234ab1ab",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "call",
                        "audio": [
                          {
                            "type": "tts",
                            "text": "Hi Zenvia!",
                            "voiceStyle": "br-Vitoria",
                            "awaitRecipientAnswer": true
                          }
                        ]
                      }
                    ],
                    "recordAudio": true,
                    "hangUpOnVoiceMail": true
                  }
                },
                "call_tts_transferTo": {
                  "value": {
                    "from": "12345a123a1234a1a2a123a1234ab1ab",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "call",
                        "audio": [
                          {
                            "type": "tts",
                            "text": "Hi Zenvia!",
                            "voiceStyle": "br-Vitoria",
                            "awaitRecipientAnswer": true
                          }
                        ]
                      }
                    ],
                    "transferTo": "5511999999999",
                    "recordAudio": true,
                    "hangUpOnVoiceMail": true
                  }
                },
                "call_file": {
                  "value": {
                    "from": "12345a123a1234a1a2a123a1234ab1ab",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "call",
                        "audio": [
                          {
                            "type": "file",
                            "fileUrl": "http://fooooo.bar/audio.mp3"
                          }
                        ]
                      }
                    ],
                    "recordAudio": true,
                    "hangUpOnVoiceMail": true
                  }
                },
                "call_file_transferTo": {
                  "value": {
                    "from": "12345a123a1234a1a2a123a1234ab1ab",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "call",
                        "audio": [
                          {
                            "type": "file",
                            "fileUrl": "http://fooooo.bar/audio.mp3"
                          }
                        ]
                      }
                    ],
                    "transferTo": "5511999999999",
                    "recordAudio": true,
                    "hangUpOnVoiceMail": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.voice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash",
            "source": "curl \"https://api.zenvia.com/v2/channels/voice/messages\" \\\n-H \"Content-Type: application/json\" \\\n-H \"X-API-TOKEN: YOUR_API_TOKEN\" \\\n-d '{\n  \"from\": \"sender-identifier\",\n  \"to\": \"recipient-identifier\",\n  \"contents\": [{\n    \"type\": \"text\",\n    \"text\": \"Some text message\"\n  }]\n}'\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "const { post } = require('request-promise');\n\npost({\n  uri: 'https://api.zenvia.com/v2/channels/voice/messages',\n  headers: {\n    'X-API-TOKEN': 'YOUR_API_TOKEN'\n  },\n  body: {\n    from: 'sender-identifier',\n    to: 'recipient-identifier',\n    contents: [{\n      type: 'text',\n      text: 'Some text message'\n    }]\n  },\n  json: true\n})\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js SDK",
            "source": "/**\n * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/whatsapp-send-text-message.js\n */\n\nimport { Client, TextContent } from '@zenvia/sdk';\n\nconst client = new Client('YOUR_API_TOKEN');\n\nconst voice = client.getChannel('voice');\n\nconst content = new TextContent('Some text message');\n\nvoice.sendMessage('sender-identifier', 'recipient-identifier', content)\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "Java",
            "label": "Java SDK",
            "source": "import com.zenvia.api.sdk.client.Channel;\nimport com.zenvia.api.sdk.client.apache.Client;\nimport com.zenvia.api.sdk.contents.TextContent;\nimport com.zenvia.api.sdk.messages.Message;\n\npublic class VoiceSendTextMessage {\n\n  public static void main (String arg []) {\n    Client client = new Client(\"YOUR_API_TOKEN\");\n\n    Channel voice = client.getChannel(\"voice\");\n\n    TextContent content = new TextContent(\"Some text message\");\n\n    try {\n      Message response = voice.sendMessage(\"sender-identifier\", \"recipient-identifier\", content);\n      System.out.println(\"Response: \" + response.toString());\n    } catch(Exception e) {\n      System.out.println(\"Error: \" + e.getMessage());\n    }\n  }\n\n}\n"
          }
        ]
      }
    },
    "/channels/whatsapp/messages": {
      "post": {
        "description": "Send a WhatsApp message",
        "tags": [
          "WhatsApp"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message.whatsapp"
              },
              "examples": {
                "text": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hi Zenvia!"
                      }
                    ]
                  }
                },
                "file": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "file",
                        "fileUrl": "https://zenvia.br/zenvia-team.png",
                        "fileMimeType": "image/png",
                        "fileCaption": "Our pic :)",
                        "fileName": "team.png"
                      }
                    ]
                  }
                },
                "template": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "template",
                        "templateId": "template_id",
                        "fields": {
                          "name": "Jhon",
                          "product": "Zenvia Chat"
                        }
                      }
                    ]
                  }
                },
                "contacts": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "contacts",
                        "contacts": [
                          {
                            "addresses": [
                              {
                                "street": "Av. Paulista, 2300",
                                "city": "São Paulo",
                                "state": "São Paulo",
                                "zip": "01310-300",
                                "county": "Brazil",
                                "countryCode": "BR",
                                "type": "WORK"
                              }
                            ],
                            "birthday": "",
                            "contactImage": "",
                            "emails": [
                              {
                                "email": "jhon@zenvia.com",
                                "type": "WORK"
                              }
                            ],
                            "name": {
                              "formattedName": "Jhon Zenvia",
                              "firstName": "Jhon",
                              "lastName": "Zenvia",
                              "middleName": "",
                              "suffix": "",
                              "prefix": ""
                            },
                            "org": {
                              "company": "Zenvia",
                              "department": "Sales",
                              "title": "Sales"
                            },
                            "phones": [
                              {
                                "phone": "08006464777",
                                "type": "WORK",
                                "waId": "132465"
                              }
                            ],
                            "urls": [
                              {
                                "url": "https://www.zenvia.com/",
                                "type": "WORK"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                "location": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "location",
                        "latitude": -23.55726,
                        "longitude": -46.66103,
                        "name": "Zenvia",
                        "address": "Av. Paulista, 2300 - 18º Andar - Bela Vista, São Paulo - SP, 01310-300",
                        "url": "https://www.zenvia.com/"
                      }
                    ]
                  }
                },
                "button": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "button",
                        "header": {
                          "type": "file",
                          "fileUrl": "https://zenvia.br/zenvia-team.png"
                        },
                        "body": "Your message body text here",
                        "footer": "Your message footer text here",
                        "buttons": [
                          {
                            "id": "btn1",
                            "title": "Button One"
                          },
                          {
                            "id": "btn2",
                            "title": "Button Two"
                          }
                        ]
                      }
                    ]
                  }
                },
                "list": {
                  "value": {
                    "from": "5510999999999",
                    "to": "55108888888888",
                    "contents": [
                      {
                        "type": "list",
                        "header": "Message Header",
                        "body": "Your message body text here",
                        "footer": "Your message footer text here",
                        "button": "Button Text",
                        "sections": [
                          {
                            "title": "Section Title",
                            "rows": [
                              {
                                "id": "row1",
                                "title": "Item One",
                                "description": "Item one description."
                              },
                              {
                                "id": "row2",
                                "title": "Item Two",
                                "description": "Item two description."
                              },
                              {
                                "id": "row3",
                                "title": "Item Three",
                                "description": "Item three description."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message.whatsapp"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash",
            "source": "curl \"https://api.zenvia.com/v2/channels/whatsapp/messages\" \\\n-H \"Content-Type: application/json\" \\\n-H \"X-API-TOKEN: YOUR_API_TOKEN\" \\\n-d '{\n  \"from\": \"sender-identifier\",\n  \"to\": \"recipient-identifier\",\n  \"contents\": [{\n    \"type\": \"text\",\n    \"text\": \"Some text message\"\n  }]\n}'\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "const { post } = require('request-promise');\n\npost({\n  uri: 'https://api.zenvia.com/v2/channels/whatsapp/messages',\n  headers: {\n    'X-API-TOKEN': 'YOUR_API_TOKEN'\n  },\n  body: {\n    from: 'sender-identifier',\n    to: 'recipient-identifier',\n    contents: [{\n      type: 'text',\n      text: 'Some text message'\n    }]\n  },\n  json: true\n})\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js SDK",
            "source": "/**\n * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/whatsapp-send-text-message.js\n */\n\nimport { Client, TextContent } from '@zenvia/sdk';\n\nconst client = new Client('YOUR_API_TOKEN');\n\nconst whatsapp = client.getChannel('whatsapp');\n\nconst content = new TextContent('Some text message');\n\nwhatsapp.sendMessage('sender-identifier', 'recipient-identifier', content)\n.then((response) => {\n  console.log('Response:', response);\n})\n.catch((error) => {\n  console.log('Error:', error);\n});\n"
          },
          {
            "lang": "Java",
            "label": "Java SDK",
            "source": "import com.zenvia.api.sdk.client.Channel;\nimport com.zenvia.api.sdk.client.apache.Client;\nimport com.zenvia.api.sdk.contents.TextContent;\nimport com.zenvia.api.sdk.messages.Message;\n\npublic class WhatsAppSendTextMessage {\n\n  public static void main (String arg []) {\n    Client client = new Client(\"YOUR_API_TOKEN\");\n\n    Channel whatsapp = client.getChannel(\"whatsapp\");\n\n    TextContent content = new TextContent(\"Some text message\");\n\n    try {\n      Message response = whatsapp.sendMessage(\"sender-identifier\", \"recipient-identifier\", content);\n      System.out.println(\"Response: \" + response.toString());\n    } catch(Exception e) {\n      System.out.println(\"Error: \" + e.getMessage());\n    }\n  }\n\n}\n"
          }
        ]
      }
    },
    "/files": {
      "post": {
        "summary": "Create a new file",
        "description": "Allows the storage of files for later use.",
        "tags": [
          "Files"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "title": "Binary File",
                    "description": "Binary file content to be stored.",
                    "type": "string"
                  },
                  "file": {
                    "$ref": "#/components/schemas/files.multipart-data"
                  }
                },
                "required": [
                  "content"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/files.file"
              }
            },
            "*/*": {
              "schema": {
                "title": "Binary File",
                "description": "The entire request body will be the file content to be stored.\n                        <br><br>The main usage for this is for easier binary content streaming in the applications using this API.",
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created file",
            "headers": {
              "Location": {
                "description": "The URL for created file object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/files.file"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Bash: multipart with data",
            "source": "curl 'https://api.zenvia.com/v2/files' \\\n-H 'X-API-TOKEN: YOUR_API_TOKEN' \\\n-F 'file={\n  \"mimeType\": \"image/png\",\n  \"name\": \"my-image.png\"\n};type=application/json' \\\n-F 'content=@./image-source.png'\n"
          },
          {
            "lang": "Shell",
            "label": "Bash: multipart",
            "source": "curl 'https://api.zenvia.com/v2/files' \\\n-H 'X-API-TOKEN: YOUR_API_TOKEN' \\\n-F 'content=@./image-source.png;type=image/png;filename=my-image.png'\n"
          },
          {
            "lang": "Shell",
            "label": "Bash: URL",
            "source": "curl 'https://api.zenvia.com/v2/files' \\\n-H 'X-API-TOKEN: YOUR_API_TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"sourceUrl\": \"https://zenvia.com/example\",\n  \"sourceHeaders\": {\n    \"Authorization\": \"Basic dXNlcjpwd2Q=\",\n    \"X-Custom-Token\": \"TOKEN\"\n  },\n  \"mimeType\": \"image/png\",\n  \"name\": \"my-image.png\"\n}'\n"
          },
          {
            "lang": "Shell",
            "label": "Bash: binary",
            "source": "curl 'https://api.zenvia.com/v2/files' \\\n-H 'X-API-TOKEN: YOUR_API_TOKEN' \\\n-H 'Content-Type: image/png' \\\n-H 'Content-Disposition: inline;filename=my-image.png' \\\n--data-binary '@./image-source.png'\n"
          }
        ]
      },
      "get": {
        "description": "Get list of files",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/files.startTimestamp"
          },
          {
            "$ref": "#/components/parameters/files.endTimestamp"
          },
          {
            "$ref": "#/components/parameters/files.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Files found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/files.file"
                  }
                }
              }
            },
            "headers": {
              "x-total": {
                "schema": {
                  "description": "The number of results",
                  "type": "string",
                  "example": "100"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "delete": {
        "description": "Delete file by id",
        "tags": [
          "Files"
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "get": {
        "summary": "Retrieve one file by id",
        "description": "Allows to retrieve information about one previously stored file.",
        "tags": [
          "Files"
        ],
        "responses": {
          "200": {
            "description": "File object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/files.file"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/files.fileId"
        }
      ]
    },
    "/flow-batches": {
      "post": {
        "description": "Create a flow batch",
        "tags": [
          "Flow Batches"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/flow.batches.json"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "csv": {
                    "type": "string",
                    "title": "Binary CSV File",
                    "description": "Binary csv file with recipients and variable values ​​when necessary. \n                             \n **Requirements**:                             \n * The file must be in **.csv** format;                             \n * The maximum file size is **50MB**; ,                            \n * The mandatory delimiter to be used between the values ​​is the **semicolon (\";\")**;                             \n * The first line of the file is dedicated to the header. There must be a column that has the recipients phone numbers. If your content has variables, there must be corresponding columns."
                  },
                  "request": {
                    "$ref": "#/components/schemas/flow.batches.multipart"
                  }
                },
                "required": [
                  "csv",
                  "request"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created flow batch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/flow.batches.item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "get": {
        "description": "Get list of flow-batches",
        "tags": [
          "Flow Batches"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/flowId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          }
        ],
        "responses": {
          "200": {
            "description": "Flow-batches found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/flow.batches.item"
                  }
                }
              }
            },
            "headers": {
              "x-total": {
                "schema": {
                  "description": "The number of results",
                  "type": "string",
                  "example": "100"
                }
              },
              "x-page-size": {
                "schema": {
                  "description": "The number of results per page",
                  "type": "string",
                  "example": "10"
                }
              },
              "x-page": {
                "schema": {
                  "description": "The current page",
                  "type": "string",
                  "example": "5"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/flow-batches/{flowBatchId}": {
      "get": {
        "description": "Retrieve one batch by id",
        "tags": [
          "Flow Batches"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/flowBatchId"
          }
        ],
        "responses": {
          "200": {
            "description": "Flow Batch found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/flow.batches.item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/flow-batches/{flowBatchId}/actions/cancel": {
      "post": {
        "description": "Cancel a flow batch",
        "tags": [
          "Flow Batches"
        ],
        "responses": {
          "204": {
            "description": "Flow batch canceled"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/flowBatchId"
        }
      ]
    },
    "/flow-batches/{flowBatchId}/actions/pause": {
      "post": {
        "description": "Pause a flow batch",
        "tags": [
          "Flow Batches"
        ],
        "responses": {
          "204": {
            "description": "Flow batch paused"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/flowBatchId"
        }
      ]
    },
    "/flow-batches/{flowBatchId}/actions/resume": {
      "post": {
        "description": "Resume a flow batch",
        "tags": [
          "Flow Batches"
        ],
        "responses": {
          "204": {
            "description": "Flow batch resumed"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/flowBatchId"
        }
      ]
    },
    "/reports/flow/entries": {
      "get": {
        "description": "Retrieve all entries applying the given filters",
        "tags": [
          "Flow Report"
        ],
        "responses": {
          "200": {
            "description": "Flow report entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reports.flow.entries.base"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/reports.flow.startDate"
        },
        {
          "$ref": "#/components/parameters/reports.flow.endDate"
        },
        {
          "$ref": "#/components/parameters/reports.flow.flowId"
        },
        {
          "$ref": "#/components/parameters/reports.flow.dispatchId"
        },
        {
          "$ref": "#/components/parameters/reports.flow.sessionId"
        }
      ]
    },
    "/reports/message/entries": {
      "get": {
        "description": "Retrieve all entries applying the given filters",
        "tags": [
          "Message Report"
        ],
        "responses": {
          "200": {
            "description": "Message report entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reports.message.entry.base"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/reports.message.startDate"
        },
        {
          "$ref": "#/components/parameters/reports.message.endDate"
        },
        {
          "$ref": "#/components/parameters/reports.message.channels"
        },
        {
          "$ref": "#/components/parameters/reports.message.type"
        }
      ]
    },
    "/subscriptions": {
      "post": {
        "description": "Create a new webhook",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Created subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription.all"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscription.all"
              }
            }
          }
        },
        "callbacks": {
          "onEvent": {
            "$ref": "#/components/callbacks/subscription-event"
          }
        }
      },
      "get": {
        "description": "List all webhooks",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Webhook Object List",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subscription.all"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "get": {
        "description": "Retrieve one webhook by id",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Webhook Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription.all"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "description": "Delete one webhook by id",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "patch": {
        "description": "Update one webhook by id",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscription.partial-subscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription.all"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ]
    },
    "/templates": {
      "post": {
        "description": "Create a new template",
        "tags": [
          "Templates"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templates.template"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templates.template"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "get": {
        "description": "List all templates",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/templates.channel"
          },
          {
            "$ref": "#/components/parameters/templates.senderId"
          },
          {
            "$ref": "#/components/parameters/templates.status"
          }
        ],
        "responses": {
          "200": {
            "description": "Template Object List",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/templates.template"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/templates/{templateId}": {
      "get": {
        "description": "Retrieve one template by id",
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "Template Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templates.template"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "description": "Delete one template by id",
        "tags": [
          "Templates"
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "patch": {
        "description": "Update one template by id",
        "tags": [
          "Templates"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templates.partial-template"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templates.template"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/templateId"
        }
      ]
    },
    "/templates/{templateId}/comments": {
      "post": {
        "description": "Create a new comment",
        "tags": [
          "Templates"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/templates.template-comment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templates.template-comment"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "get": {
        "description": "List all comments",
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "Comment Object List",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/templates.template-comment"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/templateId"
        }
      ]
    },
    "/templates/{templateId}/comments/{templateCommentId}": {
      "delete": {
        "description": "Delete comment by id",
        "tags": [
          "Templates"
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/templateId"
        },
        {
          "$ref": "#/components/parameters/templateCommentId"
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "batches.base": {
        "title": "Batch Object",
        "description": "This is a Batch object model",
        "type": "object",
        "properties": {
          "id": {
            "title": "Batch ID",
            "description": "Batch identifier created automatically",
            "type": "string",
            "example": "ad48e792-7d6e-464f-a478-df3239475016",
            "readOnly": true
          },
          "name": {
            "title": "Batch Name",
            "description": "Batch identification name",
            "type": "string",
            "example": "My batch name"
          },
          "channel": {
            "title": "Channel",
            "description": "Message channel",
            "type": "string"
          }
        },
        "required": [
          "name",
          "channel"
        ]
      },
      "batches.multipart-batch": {
        "title": "Batch Object",
        "description": "This is a Batch object model",
        "oneOf": [
          {
            "$ref": "#/components/schemas/batches.multipart.batch.sms"
          },
          {
            "$ref": "#/components/schemas/batches.multipart.batch.whatsapp"
          }
        ],
        "discriminator": {
          "propertyName": "channel",
          "mapping": {
            "sms": "#/components/schemas/batches.multipart.batch.sms",
            "whatsapp": "#/components/schemas/batches.multipart.batch.whatsapp"
          }
        }
      },
      "batches.multipart.base": {
        "title": "Batch Object",
        "description": "This is a Batch object model",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/batches.base"
          },
          {
            "type": "object",
            "properties": {
              "columnMapper": {
                "$ref": "#/components/schemas/batches.multipart.columnMapper"
              },
              "message": {
                "$ref": "#/components/schemas/batches.multipart.message"
              }
            },
            "required": [
              "message",
              "columnMapper"
            ]
          }
        ]
      },
      "batches.multipart.batch.sms": {
        "allOf": [
          {
            "$ref": "#/components/schemas/batches.multipart.base"
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "object",
                "properties": {
                  "contents": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/batches.multipart.content.text"
                        }
                      ],
                      "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                          "text": "#/components/schemas/batches.multipart.content.text"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "batches.multipart.batch.whatsapp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/batches.multipart.base"
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "object",
                "properties": {
                  "contents": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/batches.multipart.content.template"
                        }
                      ],
                      "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                          "template": "#/components/schemas/batches.multipart.content.template"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "batches.multipart.columnMapper": {
        "title": "Column Mapper",
        "description": "The mapping of variables in relation to the columns of the file. This indicates in which column of the file is the value that must be used to fill each variable. The **recipient_header_name** variable is required so the values below it indicate that they are a recipient's contact number.",
        "type": "object",
        "example": {
          "recipient_header_name": "recipient_number_column",
          "name": "recipient_name_column",
          "protocol": "protocol_column"
        },
        "properties": {
          "recipient_header_name": {
            "title": "Recipient header name",
            "description": "Recipient header name",
            "type": "string",
            "example": "recipient_header_name"
          }
        },
        "required": [
          "recipient_header_name"
        ]
      },
      "batches.multipart.message": {
        "title": "Message Object",
        "description": "This is a Message object model",
        "type": "object",
        "properties": {
          "from": {
            "title": "Sender ID",
            "description": "The identifier of the sender of the message. The sender shoud be created with a credential.",
            "type": "string"
          },
          "contents": {
            "title": "Message Contents",
            "description": "A list of content to be sent",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "from",
          "contents"
        ]
      },
      "batches.multipart.content.template": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "template"
              },
              "templateId": {
                "type": "string",
                "description": "The template identifier. Click <a href=\"https://app.zenvia.com/home/templates\" target=\"_blank\">here</a> to go to the template page.",
                "example": "c2c3e42d-6fb7-4ad6-897a-dd7613469f58"
              }
            },
            "required": [
              "type",
              "templateId"
            ]
          }
        ]
      },
      "batches.multipart.content.text": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "text"
              },
              "text": {
                "description": "Text to be sent to all recipients in the contact file. The text supports the use of variables, for its creation the following pattern must be used: **{{variable}}**",
                "type": "string",
                "example": "Hello {{name}} your service protocol is number {{protocol}}"
              }
            },
            "required": [
              "type",
              "text"
            ]
          }
        ]
      },
      "content.all": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/content.whatsapp.all"
          },
          {
            "$ref": "#/components/schemas/content.instagram.all"
          },
          {
            "$ref": "#/components/schemas/content.sms.all"
          },
          {
            "$ref": "#/components/schemas/content.facebook.all"
          },
          {
            "$ref": "#/components/schemas/content.rcs.all"
          },
          {
            "$ref": "#/components/schemas/content.voice.all"
          },
          {
            "$ref": "#/components/schemas/content.telegram.all"
          },
          {
            "$ref": "#/components/schemas/content.gbm.all"
          },
          {
            "$ref": "#/components/schemas/content.email.all"
          }
        ]
      },
      "content.base": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Content type",
            "description": "Content type discriminator",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "content.call": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "call"
              },
              "audio": {
                "description": "A sequence of audio bits forming a message to be played at the beginning of the call",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.audio-sources.all"
                }
              },
              "transferTo": {
                "description": "Transfer or call to another number when the audio message has been completely played",
                "type": "string",
                "example": "5510999999999"
              },
              "recordAudio": {
                "description": "Record the call",
                "type": "boolean",
                "example": true
              },
              "hangUpOnVoiceMail": {
                "description": "End the call on voicemail",
                "type": "boolean",
                "example": true
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "content.card": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "$ref": "#/components/schemas/content.bases.card-base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "card"
              },
              "media": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/content.bases.card-media-base"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "disposition": {
                        "type": "string",
                        "description": "Defines the position that the media will be shown inside the card. Some of the values influence the media height.<br>\n                            <br>*`ON_THE_LEFT` and `ON_THE_RIGHT` are only supported by RCS channel.*",
                        "enum": [
                          "ON_THE_LEFT",
                          "ON_THE_RIGHT",
                          "ON_THE_TOP_SHORT_HEIGHT",
                          "ON_THE_TOP_MEDIUM_HEIGHT",
                          "ON_THE_TOP_TALL_HEIGHT"
                        ],
                        "default": "ON_THE_TOP_SHORT_HEIGHT"
                      }
                    }
                  }
                ]
              },
              "quickReplyButtons": {
                "$ref": "#/components/schemas/content.bases.quick-reply-list"
              }
            }
          }
        ]
      },
      "content.carousel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "carousel"
              },
              "cardWidth": {
                "type": "string",
                "description": "The card width, which is always smaller than the width of the standalone card. The standard card width would be the equivalent of *LARGE* if it were available for use for the cards of the carousel.",
                "enum": [
                  "SMALL",
                  "MEDIUM"
                ],
                "default": "MEDIUM"
              },
              "cards": {
                "description": "The sequence of cards to be shown in the carousel",
                "type": "array",
                "minItems": 1,
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/content.bases.card-base"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "media": {
                          "type": "object",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/content.bases.card-media-base"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "disposition": {
                                  "type": "string",
                                  "description": "Defines the position that the media will be shown inside the card. Some of the values influence the media height.",
                                  "enum": [
                                    "ON_THE_TOP_SHORT_HEIGHT",
                                    "ON_THE_TOP_MEDIUM_HEIGHT",
                                    "ON_THE_TOP_TALL_HEIGHT"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "quickReplyButtons": {
                "$ref": "#/components/schemas/content.bases.quick-reply-list"
              }
            },
            "required": [
              "type",
              "cards"
            ]
          }
        ]
      },
      "content.contacts": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "contacts"
              },
              "contacts": {
                "description": "A list of contacts",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "description": "A list of contact addresses",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "street": {
                            "description": "Street number and name",
                            "type": "string",
                            "example": "Street Address, 123"
                          },
                          "city": {
                            "description": "City name",
                            "type": "string",
                            "example": "City name"
                          },
                          "state": {
                            "description": "State abbreviation",
                            "type": "string",
                            "example": "SP"
                          },
                          "zip": {
                            "description": "ZIP code",
                            "type": "string",
                            "example": "01000-000"
                          },
                          "country": {
                            "description": "Full country name",
                            "type": "string",
                            "example": "Brazil"
                          },
                          "countryCode": {
                            "description": "Two-letter country abbreviation",
                            "type": "string",
                            "example": "BR"
                          },
                          "type": {
                            "description": "The type of the address",
                            "type": "string",
                            "enum": [
                              "HOME",
                              "WORK"
                            ],
                            "example": "WORK"
                          }
                        }
                      },
                      "minItems": 0
                    },
                    "birthday": {
                      "description": "The birthday of the contact",
                      "type": "string",
                      "example": "11/10/1980"
                    },
                    "contactImage": {
                      "description": "Base64-encoded image. Its value has to be a string based on the Base64 Data Encodings specification (RFC 4648).",
                      "type": "string"
                    },
                    "emails": {
                      "description": "A list of e-mails",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "description": "E-mail address",
                            "type": "string",
                            "example": "my-email@email-domain.com"
                          },
                          "type": {
                            "description": "The type of e-mail",
                            "type": "string",
                            "enum": [
                              "HOME",
                              "WORK"
                            ],
                            "example": "HOME"
                          }
                        }
                      },
                      "minItems": 0
                    },
                    "ims": {
                      "description": "A list of messaging contact information",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "service": {
                            "description": "Instant messaging service name",
                            "type": "string",
                            "example": "This is a messaging service"
                          },
                          "userId": {
                            "description": "User identifier in this instant messaging service",
                            "type": "string",
                            "example": "johnsmith"
                          }
                        }
                      },
                      "minItems": 0
                    },
                    "name": {
                      "description": "Full contact name",
                      "type": "object",
                      "properties": {
                        "formattedName": {
                          "description": "Full name as it normally appears",
                          "type": "string",
                          "example": "John Megan Smith"
                        },
                        "firstName": {
                          "description": "First name",
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "description": "Last name",
                          "type": "string",
                          "example": "Smith"
                        },
                        "middleName": {
                          "description": "Middle name",
                          "type": "string",
                          "example": "Megan"
                        },
                        "suffix": {
                          "description": "Name suffix",
                          "type": "string",
                          "example": "PhD"
                        },
                        "prefix": {
                          "description": "Name preffix",
                          "type": "string",
                          "example": "Mr."
                        }
                      },
                      "required": [
                        "formattedName",
                        "firstName"
                      ]
                    },
                    "org": {
                      "title": "Organization",
                      "description": "Contact organization information",
                      "type": "object",
                      "properties": {
                        "company": {
                          "description": "Name of the contact's company",
                          "type": "string",
                          "example": "Ms. Sara"
                        },
                        "department": {
                          "description": "Name of the contact's department",
                          "type": "string",
                          "example": "Sales"
                        },
                        "title": {
                          "description": "Contact's business title",
                          "type": "string",
                          "example": "Manager"
                        }
                      }
                    },
                    "phones": {
                      "description": "A list of contact phone numbers",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "phone": {
                            "description": "Formatted phone number",
                            "type": "string",
                            "example": "+5521999998888"
                          },
                          "type": {
                            "description": "The type of the phone number",
                            "type": "string",
                            "enum": [
                              "CELL",
                              "MAIN",
                              "IPHONE",
                              "HOME",
                              "WORK"
                            ],
                            "example": "CELL"
                          },
                          "waId": {
                            "description": "WhatsApp ID _(supported channels: WhatsApp)_",
                            "type": "string"
                          }
                        }
                      },
                      "minItems": 0
                    },
                    "urls": {
                      "description": "A list of contact URLs",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "description": "URL",
                            "type": "string",
                            "example": "https://www.zenvia.com"
                          },
                          "type": {
                            "description": "The type of the phone number",
                            "type": "string",
                            "enum": [
                              "HOME",
                              "WORK"
                            ],
                            "example": "WORK"
                          }
                        }
                      },
                      "minItems": 0
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "minItems": 1
              }
            },
            "required": [
              "type",
              "contacts"
            ]
          }
        ]
      },
      "content.email": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "email"
              },
              "subject": {
                "type": "string",
                "description": "The e-mail subject",
                "example": "Re: Ticket 12345"
              },
              "html": {
                "type": "string",
                "description": "HTML version of the e-mail. This is the normally shown version.",
                "example": "<b>Hello!</b>"
              },
              "text": {
                "type": "string",
                "description": "Text version of the e-mail.",
                "example": "Hello!"
              },
              "attachments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.bases.file"
                },
                "description": "E-mail attachments.",
                "example": [
                  {
                    "fileUrl": "https://zenvia.com/example1.pdf"
                  },
                  {
                    "fileUrl": "https://zenvia.com/example2.pdf"
                  }
                ]
              },
              "cc": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Courtesy Copy",
                "description": "List of e-mails addresses to be copied on the e-mail.",
                "example": [
                  "example1@zenvia.com",
                  "example2@zenvia.com"
                ]
              },
              "bcc": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Blind Courtesy Copy",
                "description": "List of e-mails addresses to be secretly copied on the e-mail.",
                "example": [
                  "example3@zenvia.com",
                  "example4@zenvia.com"
                ]
              }
            },
            "required": [
              "type",
              "subject"
            ]
          }
        ]
      },
      "content.file": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "file"
              }
            },
            "required": [
              "type",
              "fileUrl"
            ]
          },
          {
            "$ref": "#/components/schemas/content.bases.file"
          },
          {
            "properties": {
              "fileCaption": {
                "type": "string",
                "description": "Some description for the file.\n                      <br>*Only applicable to [WhatsApp](#tag/WhatsApp), [RCS](#tag/RCS), [Telegram](#tag/Telegram) and [Google Business Messages](#tag/Google-Business-Messages) images and videos.*",
                "example": "Some caption"
              }
            }
          }
        ]
      },
      "content.json": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "json"
              },
              "payload": {
                "type": "object"
              }
            },
            "required": [
              "type",
              "payload"
            ]
          }
        ]
      },
      "content.location": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "location"
              },
              "longitude": {
                "type": "number",
                "description": "Longitude of the location",
                "example": -122.425332
              },
              "latitude": {
                "type": "number",
                "description": "Latitude of the location",
                "example": 37.758056
              },
              "name": {
                "type": "string",
                "description": "Name of the location",
                "example": "Home"
              },
              "address": {
                "type": "string",
                "description": "Address of the location. Only displayed if name is present.",
                "example": "Home Address"
              },
              "url": {
                "type": "string",
                "description": "URL for the website where the location information was downloaded _(WhatsApp restriction: available only on IN direction)_",
                "example": "https://www.zenvia.com"
              }
            },
            "required": [
              "type",
              "longitude",
              "latitude"
            ]
          }
        ]
      },
      "content.replyable-text": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "replyable_text"
              },
              "quickReplyButtons": {
                "$ref": "#/components/schemas/content.bases.quick-reply-list"
              }
            }
          }
        ]
      },
      "content.template": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "template"
              },
              "templateId": {
                "type": "string",
                "description": "The template identifier. Click <a href=\"https://app.zenvia.com/home/templates\" target=\"_blank\">here</a> to go to the template page.",
                "example": "c2c3e42d-6fb7-4ad6-897a-dd7613469f58"
              },
              "fields": {
                "type": "object",
                "description": "The available fields to be used in this template",
                "example": {
                  "user": "John Smith",
                  "protocol": "34534252"
                }
              }
            },
            "required": [
              "type",
              "templateId"
            ]
          }
        ]
      },
      "content.text": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "text"
              },
              "text": {
                "description": "Text to be sent",
                "type": "string",
                "example": "This is a text."
              },
              "payload": {
                "description": "Payload of selected button",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "type",
              "text"
            ]
          }
        ]
      },
      "content.audio-sources.all": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.audio-sources.tts"
          },
          {
            "$ref": "#/components/schemas/content.audio-sources.file"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "tts": "#/components/schemas/content.audio-sources.tts",
            "file": "#/components/schemas/content.audio-sources.file"
          }
        }
      },
      "content.audio-sources.file": {
        "title": "Audio file",
        "description": "URL of audio",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "fileUrl": {
            "description": "URL of audio",
            "type": "string",
            "example": "http://fooooo.bar/audio.mp3"
          }
        },
        "required": [
          "type",
          "fileUrl"
        ]
      },
      "content.audio-sources.tts": {
        "title": "Text to speech",
        "description": "Send a text to speech",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "text": {
            "description": "Text that will be read on the call with the chosen voice type",
            "type": "string",
            "example": "This is a text"
          },
          "voiceStyle": {
            "type": "string",
            "description": "Language and type of the audio message",
            "enum": [
              "br-Camila",
              "br-Vitoria",
              "br-Ricardo",
              "en-Joey",
              "en-Joanna",
              "fre-Celine",
              "fre-Mathieu",
              "ger-Vicki",
              "ger-Hans",
              "ita-Carla",
              "ita-Giorgio",
              "jap-Mizuki",
              "pol-Jan",
              "rus-Tatyana",
              "rus-Maxim",
              "esp-Conchita",
              "esp-Enrique"
            ],
            "default": "br-Vitoria",
            "example": "br-Ricardo"
          },
          "awaitRecipientAnswer": {
            "description": "Await for the recipient answer",
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "content.bases.buttons-list": {
        "type": "array",
        "title": "Buttons",
        "description": "Vertical list of buttons displayed inside a card. These will *not* fade away once one a button is clicked.<br>\n    <br>*[RCS](#tag/RCS): A maximum of 4 buttons is supported, but they might not be shown if they do not fit in the available space.*\n    <br>*[Facebook](#tag/Facebook): A maximum of 3 buttons is supported. Only `text` and `link` buttons are supported.*",
        "maxItems": 4,
        "items": {
          "$ref": "#/components/schemas/content.bases.buttons.all"
        }
      },
      "content.bases.card-base": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A title in bold shown above the text of the card",
            "example": "Hello"
          },
          "text": {
            "type": "string",
            "description": "A text to be displayed inside the card",
            "example": "This is the best thing you will see today!"
          },
          "media": {
            "type": "object"
          },
          "buttons": {
            "$ref": "#/components/schemas/content.bases.buttons-list"
          }
        }
      },
      "content.bases.card-media-base": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Public URL of media file, which can be an image, a GIF, or a video. The media will be displayed inside the card.\n        <br><br>*Videos will display a play button instead of a preview of the content sent.*",
            "example": "https://zenvia.br/zenvia-team.png"
          },
          "disposition": {
            "type": "string",
            "default": "ON_THE_TOP_SHORT_HEIGHT"
          },
          "caption": {
            "type": "string",
            "description": "Media content description used by screen readers to aid users with disability understand the context",
            "example": "Zenvia's team picture"
          }
        },
        "required": [
          "url"
        ]
      },
      "content.bases.file": {
        "type": "object",
        "title": "File",
        "properties": {
          "fileUrl": {
            "type": "string",
            "description": "URL of the file to be sent",
            "example": "https://example.com/document.pdf"
          },
          "fileMimeType": {
            "type": "string",
            "description": "MIME type of the file to be sent. If not sent, the MIME type will be identified using the content type sent in the request header.\n                    <br>*For [WhatsApp channel](#tag/WhatsApp), see [supported contents and sizes.](#section/WhatsApp-limitations)*\n                    <br>*For [Instagram channel](#tag/Instagram), see [supported contents and sizes.](#section/Instagram-limitations)*\n                    <br>*For [Telegram channel](#tag/Telegram), see [supported contents and sizes.](#section/Telegram-limitations)*\n                    <br>*For [E-Mail channel](#tag/E-Mail), see [supported contents and sizes.](#section/E-Mail-limitations)*\n                    <br>*For the rest of the channels, the limitations are currently undocumented.*",
            "example": "application/pdf"
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file.\n                    <br>*Only applicable to [WhatsApp](#tag/WhatsApp), [Facebook](#tag/Facebook), [Telegram](#tag/Telegram), [Google Business Messages](#tag/Google-Business-Messages) and [E-mail](#tag/E-Mail) documents.*",
            "example": "document.pdf"
          }
        },
        "required": [
          "fileUrl"
        ]
      },
      "content.bases.quick-reply-list": {
        "type": "array",
        "title": "Quick reply buttons",
        "description": "Horizontal list of buttons displayed after the content. These *will* fade away once one is clicked.<br>\n    <br>*[RCS](#tag/RCS): A maximum of 11 buttons is supported.*\n    <br>*[Instagram](#tag/Instagram): Only `text` buttons are supported.*\n    <br>*[Facebook](#tag/Facebook): Only `text` buttons are supported.*",
        "maxItems": 13,
        "items": {
          "$ref": "#/components/schemas/content.bases.buttons.all"
        }
      },
      "content.bases.buttons.all": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.postback"
          },
          {
            "$ref": "#/components/schemas/content.bases.buttons.web-url"
          },
          {
            "$ref": "#/components/schemas/content.bases.buttons.calendar-event"
          },
          {
            "$ref": "#/components/schemas/content.bases.buttons.dial"
          },
          {
            "$ref": "#/components/schemas/content.bases.buttons.share-location"
          },
          {
            "$ref": "#/components/schemas/content.bases.buttons.view-location"
          },
          {
            "$ref": "#/components/schemas/content.bases.buttons.search-location"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.bases.buttons.postback",
            "link": "#/components/schemas/content.bases.buttons.web-url",
            "calendar_event": "#/components/schemas/content.bases.buttons.calendar-event",
            "dial": "#/components/schemas/content.bases.buttons.dial",
            "share_location": "#/components/schemas/content.bases.buttons.share-location",
            "view_location": "#/components/schemas/content.bases.buttons.view-location",
            "search_location": "#/components/schemas/content.bases.buttons.search-location"
          }
        }
      },
      "content.bases.buttons.base": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Button type",
            "description": "Button type discriminator",
            "type": "string"
          },
          "text": {
            "type": "string",
            "description": "Text to be displayed inside the button",
            "example": "Click me!"
          },
          "payload": {
            "type": "string",
            "description": "Content to be sent back as a message event when the user clicks the button. By default, the text of the button will be used as payload.",
            "example": "clicked"
          }
        }
      },
      "content.bases.buttons.calendar-event": {
        "type": "object",
        "description": "Opens the standard calendar application on the user's device and creates a new event with the sent data.",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "startTime": {
                "type": "string",
                "description": "Start date and time of the event formatted following RFC3339 standard (similar to ISO 8601). Default timezone is UTC.",
                "example": "2021-01-15T17:30:00-03:00"
              },
              "endTime": {
                "type": "string",
                "description": "End date and time of the event formatted following RFC3339 standard (similar to ISO 8601). Default timezone is UTC.",
                "example": "2021-01-15T17:30:00-03:00"
              },
              "title": {
                "type": "string",
                "description": "Event description.",
                "example": "API development"
              }
            },
            "required": [
              "type",
              "text",
              "startTime",
              "endTime",
              "title"
            ]
          }
        ]
      },
      "content.bases.buttons.dial": {
        "type": "object",
        "description": "It opens the default dial app on the user's device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "type": "string",
                "description": "Phone Number (E.164 format).",
                "example": "+558006464777"
              }
            },
            "required": [
              "type",
              "text",
              "phoneNumber"
            ]
          }
        ]
      },
      "content.bases.buttons.postback": {
        "type": "object",
        "description": "Send back a text message event when the user clicks on the button.",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.base"
          },
          {
            "type": "object",
            "required": [
              "type",
              "text"
            ]
          }
        ]
      },
      "content.bases.buttons.search-location": {
        "type": "object",
        "description": "Opens the standard calendar application on the user's device and creates a new event with the sent data.",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "A text, for example, an address or a company name, to be searched in the default user's map application.",
                "example": "Av. Paulista, 2300 - São Paulo"
              }
            },
            "required": [
              "type",
              "text",
              "query"
            ]
          }
        ]
      },
      "content.bases.buttons.share-location": {
        "type": "object",
        "description": "Opens the default app for maps on the user's device and requests the user's location.",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.base"
          },
          {
            "type": "object",
            "required": [
              "type",
              "text"
            ]
          }
        ]
      },
      "content.bases.buttons.view-location": {
        "type": "object",
        "description": "Opens the standard calendar application on the user's device and creates a new event with the sent data.",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "string",
                "description": "Latitude in degrees (range from -90.0 and +90.0).",
                "example": "-23.557260"
              },
              "longitude": {
                "type": "string",
                "description": "Longitude in degrees (range from -180.0 and +180.0).",
                "example": "-46.661030"
              },
              "label": {
                "type": "string",
                "description": "Text to be displayed with the map position pin icon.",
                "example": "Zenvia"
              }
            },
            "required": [
              "type",
              "text",
              "latitude",
              "longitude"
            ]
          }
        ]
      },
      "content.bases.buttons.web-url": {
        "type": "object",
        "description": "Opens a URL on user's device and sends the payload field content to the Agent.",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.bases.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to be accessed upon click.",
                "example": "https://zenvia.com/"
              }
            },
            "required": [
              "type",
              "text",
              "url"
            ]
          }
        ]
      },
      "content.email.all": {
        "title": "E-Mail",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.email"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "email": "#/components/schemas/content.email"
          }
        }
      },
      "content.facebook.all": {
        "title": "Facebook",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "$ref": "#/components/schemas/content.file"
          },
          {
            "$ref": "#/components/schemas/content.card"
          },
          {
            "$ref": "#/components/schemas/content.carousel"
          },
          {
            "$ref": "#/components/schemas/content.replyable-text"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.text",
            "file": "#/components/schemas/content.file",
            "card": "#/components/schemas/content.card",
            "carousel": "#/components/schemas/content.carousel",
            "replyable_text": "#/components/schemas/content.replyable-text"
          }
        }
      },
      "content.gbm.all": {
        "title": "Google Business Messages",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "$ref": "#/components/schemas/content.file"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.text",
            "file": "#/components/schemas/content.file"
          }
        }
      },
      "content.instagram.all": {
        "title": "Instagram",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "$ref": "#/components/schemas/content.file"
          },
          {
            "$ref": "#/components/schemas/content.replyable-text"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.text",
            "file": "#/components/schemas/content.file",
            "replyable_text": "#/components/schemas/content.replyable-text"
          }
        }
      },
      "content.rcs.all": {
        "title": "RCS",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "$ref": "#/components/schemas/content.file"
          },
          {
            "$ref": "#/components/schemas/content.card"
          },
          {
            "$ref": "#/components/schemas/content.carousel"
          },
          {
            "$ref": "#/components/schemas/content.replyable-text"
          },
          {
            "$ref": "#/components/schemas/content.template"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.text",
            "template": "#/components/schemas/content.template",
            "file": "#/components/schemas/content.file",
            "card": "#/components/schemas/content.card",
            "carousel": "#/components/schemas/content.carousel",
            "replyable_text": "#/components/schemas/content.replyable-text"
          }
        }
      },
      "content.sms.all": {
        "title": "SMS",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.sms.text"
          },
          {
            "$ref": "#/components/schemas/content.template"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.sms.text",
            "template": "#/components/schemas/content.template"
          }
        }
      },
      "content.sms.text": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "type": "object",
            "properties": {
              "encodingStrategy": {
                "type": "string",
                "enum": [
                  "AUTO",
                  "MORE_CHARACTER_SUPPORT",
                  "MORE_CHARACTERS_PER_MESSAGE"
                ],
                "default": "AUTO",
                "description": "The method used for selecting the message encoding used to dispatch the message to the provider.\n          <br>The default value **AUTO** will select the encoding method based on the text content, so this is only necessary\n          if you need to enforce **MORE_CHARACTERS_PER_MESSAGE** method (not recommended regarding readability), or to enforce **MORE_CHARACTER_SUPPORT**\n          if you have any trouble with **AUTO**.\n          <br>*Only applicable to [SMS channel](#tag/SMS).*",
                "example": "AUTO"
              }
            }
          }
        ]
      },
      "content.telegram.all": {
        "title": "Telegram",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "$ref": "#/components/schemas/content.file"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.text",
            "file": "#/components/schemas/content.file"
          }
        }
      },
      "content.voice.all": {
        "title": "Voice",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.call"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "call": "#/components/schemas/content.call"
          }
        }
      },
      "content.whatsapp.all": {
        "title": "WhatsApp",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.text"
          },
          {
            "$ref": "#/components/schemas/content.file"
          },
          {
            "$ref": "#/components/schemas/content.template"
          },
          {
            "$ref": "#/components/schemas/content.contacts"
          },
          {
            "$ref": "#/components/schemas/content.location"
          },
          {
            "$ref": "#/components/schemas/content.whatsapp.button.index"
          },
          {
            "$ref": "#/components/schemas/content.whatsapp.list"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.text",
            "file": "#/components/schemas/content.file",
            "template": "#/components/schemas/content.template",
            "contacts": "#/components/schemas/content.contacts",
            "location": "#/components/schemas/content.location",
            "button": "#/components/schemas/content.whatsapp.button.index",
            "list": "#/components/schemas/content.whatsapp.list"
          }
        }
      },
      "content.whatsapp.list": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "list"
              },
              "header": {
                "type": "string",
                "title": "Header text",
                "example": "Header text."
              },
              "body": {
                "type": "string",
                "title": "Body text",
                "example": "Body text."
              },
              "footer": {
                "type": "string",
                "title": "Footer text",
                "example": "Footer text."
              },
              "button": {
                "type": "string",
                "title": "List button",
                "description": "Button used to open the list. Does not allow emojis or markdown.",
                "minLength": 1,
                "maxLength": 20
              },
              "sections": {
                "type": "array",
                "title": "List of sections",
                "minItems": 1,
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "title": "Section title",
                      "example": "Section name"
                    },
                    "rows": {
                      "type": "array",
                      "description": "Max of 10 rows considering all sections together.",
                      "minItems": 1,
                      "maxItems": 10,
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "title": "Row id",
                            "example": "Row id"
                          },
                          "title": {
                            "type": "string",
                            "title": "Row title",
                            "example": "Row title"
                          },
                          "description": {
                            "type": "string",
                            "title": "Row description",
                            "example": "Row description"
                          }
                        },
                        "required": [
                          "id",
                          "title"
                        ]
                      }
                    }
                  },
                  "required": [
                    "title",
                    "rows"
                  ]
                }
              }
            },
            "required": [
              "type",
              "body",
              "button",
              "sections"
            ]
          }
        ]
      },
      "content.whatsapp.button.index": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "button"
              },
              "header": {
                "$ref": "#/components/schemas/content.whatsapp.button.header.index"
              },
              "body": {
                "type": "string",
                "title": "Body text",
                "example": "Body text."
              },
              "footer": {
                "type": "string",
                "title": "Footer text",
                "example": "Footer text."
              },
              "buttons": {
                "type": "array",
                "title": "List of buttons",
                "minItems": 1,
                "maxItems": 3,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "Button ID"
                    },
                    "title": {
                      "type": "string",
                      "example": "Button text"
                    }
                  },
                  "required": [
                    "id",
                    "title"
                  ]
                }
              }
            },
            "required": [
              "type",
              "body",
              "buttons"
            ]
          }
        ]
      },
      "content.whatsapp.button.header.base": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Header Type",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "content.whatsapp.button.header.file": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.whatsapp.button.header.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "file"
              },
              "fileUrl": {
                "type": "string",
                "description": "The URL of the file to be sent.",
                "example": "https://example.com/document.pdf"
              },
              "fileMimeType": {
                "type": "string",
                "description": "MIME type of the file to be sent. If not sent, the MIME type will be identified using the content type sent in the request header. For [WhatsApp channel](#tag/WhatsApp), see [supported contents and sizes.](#section/WhatsApp-limitations)",
                "example": "application/pdf"
              },
              "fileName": {
                "type": "string",
                "description": "The name of the file.",
                "example": "document.pdf"
              }
            },
            "required": [
              "type",
              "fileUrl"
            ]
          }
        ]
      },
      "content.whatsapp.button.header.index": {
        "title": "Object header",
        "oneOf": [
          {
            "$ref": "#/components/schemas/content.whatsapp.button.header.text"
          },
          {
            "$ref": "#/components/schemas/content.whatsapp.button.header.file"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/content.whatsapp.button.header.text",
            "file": "#/components/schemas/content.whatsapp.button.header.file"
          }
        }
      },
      "content.whatsapp.button.header.text": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/content.whatsapp.button.header.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "text"
              },
              "text": {
                "type": "string",
                "title": "Header text",
                "example": "Header text"
              }
            },
            "required": [
              "type",
              "text"
            ]
          }
        ]
      },
      "error.base": {
        "title": "Error Object",
        "description": "This is a Error object model",
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "description": "An error code to identify the error programmatically.",
            "type": "string",
            "readOnly": true,
            "example": "VALIDATION_ERROR"
          },
          "message": {
            "title": "Message",
            "description": "A human readable text to help on error troubleshooting.",
            "type": "string",
            "readOnly": true,
            "example": "Validation error"
          },
          "details": {
            "title": "Details",
            "description": "Error details to help identify the problem source.",
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/error.errors"
            }
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "error.errors": {
        "title": "Error object",
        "description": "This is a Error object schema.",
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "description": "Details error code",
            "type": "string",
            "readOnly": true
          },
          "path": {
            "title": "Path",
            "description": "Error path",
            "type": "string",
            "readOnly": true
          },
          "message": {
            "title": "Message",
            "description": "Human readable message",
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "events.all": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/events.message-event"
          },
          {
            "$ref": "#/components/schemas/events.message-status-event"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "MESSAGE": "#/components/schemas/events.message-event",
            "MESSAGE_STATUS": "#/components/schemas/events.message-status-event"
          }
        }
      },
      "events.base": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Event Id",
            "description": "ID of the webhook event. Can be used to identify retried deliveries in case of webhook errors.",
            "type": "string"
          },
          "timestamp": {
            "title": "Event Timestamp",
            "description": "Timestamp of the webhook event",
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "title": "Event type",
            "type": "string",
            "enum": [
              "MESSAGE",
              "MESSAGE_STATUS"
            ]
          },
          "subscriptionId": {
            "title": "Webhook ID",
            "description": "ID of the webhook that caused this event to be delivered",
            "type": "string"
          },
          "channel": {
            "title": "Message Channel",
            "type": "string"
          }
        }
      },
      "events.error-cause": {
        "type": "object",
        "properties": {
          "channelErrorCode": {
            "title": "Channel Error Code",
            "description": "An error code returned by the channel.",
            "type": "string"
          },
          "reason": {
            "title": "Reason",
            "description": "A likely raw message with the information about the status.",
            "type": "string"
          },
          "details": {
            "title": "Details",
            "description": "A human readable text to help identify the error reason.",
            "type": "string"
          }
        }
      },
      "events.message-event": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/events.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Event type",
                "type": "string",
                "enum": [
                  "MESSAGE",
                  "MESSAGE_STATUS"
                ],
                "example": "MESSAGE"
              },
              "direction": {
                "title": "Message Direction",
                "description": "Indicates whether the message is received from a channel (IN) or sent to a channel (OUT)\n> **Note:** The **OUT** direction is under construction.",
                "type": "string",
                "enum": [
                  "IN",
                  "OUT"
                ]
              },
              "message": {
                "$ref": "#/components/schemas/message.all"
              }
            }
          }
        ]
      },
      "events.message-status-event": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/events.base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Event type",
                "type": "string",
                "enum": [
                  "MESSAGE",
                  "MESSAGE_STATUS"
                ],
                "example": "MESSAGE_STATUS"
              },
              "messageId": {
                "title": "Message ID",
                "description": "ID of the message whose status is being delivered",
                "type": "string"
              },
              "contentIndex": {
                "title": "Content Index",
                "description": "Index of content that is receiving the status update",
                "type": "number"
              },
              "messageStatus": {
                "$ref": "#/components/schemas/events.message-status"
              }
            }
          }
        ]
      },
      "events.message-status": {
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Status timestamp",
            "description": "Timestamp of the message status. Usually received from the provider of the channel.",
            "type": "string",
            "format": "date-time"
          },
          "code": {
            "title": "Status code",
            "description": "Code that indicates the message status",
            "type": "string",
            "enum": [
              "REJECTED",
              "SENT",
              "DELIVERED",
              "NOT_DELIVERED",
              "READ",
              "DELETED",
              "CLICKED",
              "VERIFIED"
            ]
          },
          "description": {
            "title": "Status description",
            "description": "A description of status",
            "type": "string"
          },
          "causes": {
            "title": "Status causes",
            "description": "A list of errors or cause of status",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/events.error-cause"
            }
          }
        },
        "required": [
          "code",
          "timestamp"
        ]
      },
      "files.file": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "title": "ID",
                "description": "ID of the file resource created.",
                "type": "string",
                "example": "f8b5a77c7cd3403b08231a1a9c40705717cbc8cab4a9a9e08bf8a5c78905b7d5",
                "readOnly": true
              },
              "url": {
                "title": "URL",
                "description": "URL from where the file content is available.",
                "type": "string",
                "example": "https://zenvia.chat/storage/files/f8b5a77c7cd3403b08231a1a9c40705717cbc8cab4a9a9e08bf8a5c78905b7d5.bin",
                "readOnly": true
              },
              "sourceUrl": {
                "title": "Source URL",
                "description": "URL from where the file content will be obtained.",
                "type": "string",
                "example": "https://zenvia.com/example.mp4",
                "writeOnly": true
              },
              "sourceHeaders": {
                "title": "Source Headers",
                "description": "These headers will be sent in the request to `sourceUrl` to get the file content.",
                "type": "object",
                "example": {
                  "Authorization": "Basic dXNlcjpwd2Q=",
                  "X-Custom-Token": "TOKEN"
                },
                "writeOnly": true
              }
            },
            "required": [
              "sourceUrl"
            ]
          },
          {
            "$ref": "#/components/schemas/files.multipart-data"
          },
          {
            "type": "object",
            "properties": {
              "bytes": {
                "title": "Bytes",
                "description": "Size in bytes of the file content created.",
                "type": "number",
                "example": 1044889600,
                "readOnly": true
              },
              "createdAt": {
                "title": "Created At",
                "description": "Timestamp of the file creation.",
                "type": "string",
                "example": "2021-12-20T14:37:59.000Z",
                "readOnly": true
              },
              "deleteAt": {
                "title": "Delete At",
                "description": "Timestamp of the moment after which the file will be automatically deleted.",
                "type": "string",
                "example": "2021-12-21T14:37:59.000Z",
                "readOnly": true
              }
            }
          }
        ]
      },
      "files.multipart-data": {
        "title": "File object",
        "description": "This is a file object model.",
        "type": "object",
        "properties": {
          "mimeType": {
            "title": "Mime Type",
            "description": "Mime type of the file. When not provided, it will be determined based either on the header *Content-Type* or the file name *extension*.",
            "type": "string",
            "example": "video/mp4"
          },
          "name": {
            "title": "Name",
            "description": "Name of the file. When not provided, it will be obtained from either the header *Content-Disposition* or the URL path.",
            "type": "string",
            "example": "my-video.mp4"
          },
          "autoDeleteMinutes": {
            "title": "Auto Delete Minutes",
            "default": null,
            "nullable": true,
            "minimum": 1,
            "description": "Amount of minutes after which the file will be automatically deleted.\n                    <br>The default value, `null`, means the file will be kept until manually deleted.",
            "type": "number",
            "example": 1440,
            "writeOnly": true
          }
        }
      },
      "flow.batches.aggregated-status": {
        "title": "Aggregated batch status",
        "description": "Detailed status of the batch items",
        "type": "object",
        "properties": {
          "successProcessedRecords": {
            "description": "The quantity of records processed with success",
            "type": "number",
            "example": 1
          },
          "timedoutRecords": {
            "description": "The quantity of records in timed out",
            "type": "number",
            "example": 1
          },
          "errorProcessedRecords": {
            "description": "The quantity of records processed with error",
            "type": "number",
            "example": 1
          },
          "canceledRecords": {
            "description": "The quantity of records canceled",
            "type": "number",
            "example": 1
          },
          "processingRecords": {
            "description": "The quantity of records in processing",
            "type": "number",
            "example": 1
          },
          "queuedRecords": {
            "description": "The quantity of records in queue",
            "type": "number",
            "example": 1
          }
        }
      },
      "flow.batches.base": {
        "title": "Flow Batch Status Object",
        "description": "This is a Flow Batch Status object model.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The flow batch identifier.",
            "example": "853c2b58-8367-4fcb-8d16-d42208e15942",
            "readOnly": true
          },
          "flowId": {
            "type": "string",
            "description": "The the flow identifier. You can view your <a href=\"https://app.zenvia.com/flows\" target=\"_blank\"> Flow IDs here.</a>",
            "example": "c2c3e42d-6fb7-4ad6-897a-dd7613469f58"
          },
          "name": {
            "type": "string",
            "description": "The batch name.",
            "example": "Sales campaing"
          },
          "status": {
            "description": "The batch status:         \n `LOADING`:  Loading the batch         \n `READY`: Batch loaded and ready to be dispatched         \n `QUEUED`: Batch sent to dispatch queue         \n `PROCESSING`: Batch dispatch in progress         \n `WAITING`: Waiting confirmation of the batch status         \n `COMPLETED`: Batch completed         \n `CANCELING`: Batch being canceled         \n `CANCELED`: Batch canceled         \n `TIMEOUT`: Timeout to process the batch         \n `ERROR`: Error to proceed with the batch",
            "enum": [
              "LOADING",
              "READY",
              "QUEUED",
              "PROCESSING",
              "WAITING",
              "COMPLETED",
              "CANCELING",
              "CANCELED",
              "TIMEOUT",
              "ERROR"
            ],
            "type": "string",
            "example": "READY",
            "readOnly": true
          },
          "errorCode": {
            "description": "The batch error",
            "type": "string",
            "enum": [
              "ERROR_SAVING_FILE",
              "ERROR_INVALID_MEDIA_TYPE",
              "ERROR_IN_MEDIA_TYPE_DETECTION",
              "ERROR_FILE_NOT_FOUND",
              "ERROR_IN_FILE_PROCESSING",
              "ERROR_PROCESSING_CONTACTS",
              "ERROR_INVALID_BULK_HEADERS",
              "ERROR_INVALID_CHARACTER",
              "ERROR_INVALID_TELEPHONE_NUMBER",
              "ERROR_SEEKING_CONTACTS",
              "ERROR_MAX_TPS",
              "UNSUPPORTED_CONTENT",
              "HEADER_SIZE_MISMATCH",
              "INVALID_MESSAGE_FORMAT",
              "FLOW_ID_NOT_FOUND",
              "GATEWAY_ERROR",
              "FLOW_ERROR",
              "INVALID_CONTENTS",
              "RECIPIENT_NOT_FOUND",
              "ERROR_REQUEST_STANDARD_ANSWER",
              "RESCHEDULE_PROCESS_ERROR"
            ],
            "example": "FLOW_ID_NOT_FOUND",
            "readOnly": true
          },
          "size": {
            "description": "The quantity of recived registers",
            "type": "number",
            "example": 1,
            "readOnly": true
          },
          "aggregatedStatus": {
            "type": "object",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/flow.batches.aggregated-status"
              }
            ]
          },
          "progress": {
            "description": "Progress of batch. 0-100",
            "type": "number",
            "example": 100,
            "readOnly": true
          },
          "schedule": {
            "type": "object",
            "$ref": "#/components/schemas/flow.batches.schedule"
          },
          "createdAt": {
            "type": "string",
            "description": "The created date.",
            "example": "2021-08-03T16:26:23.616Z",
            "readOnly": true
          },
          "createdByUserEmail": {
            "type": "string",
            "description": "The creator e-mail",
            "example": "user@mail.com",
            "readOnly": true
          }
        },
        "required": [
          "flowId",
          "name"
        ]
      },
      "flow.batches.content": {
        "title": "The batch content",
        "description": "The content to be used on dispatch",
        "type": "object",
        "properties": {
          "fieldNames": {
            "description": "Field names, ignored when containsHeader=true (you can send empty in this case)",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            },
            "example": [
              "sms",
              "name",
              "product",
              "deliveryDate"
            ]
          }
        }
      },
      "flow.batches.file": {
        "title": "CSV file properties",
        "description": "Informations about the CSV file",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The file name.",
            "example": "file.csv",
            "readOnly": true
          },
          "containsHeader": {
            "description": "Set true if the file contains the fields names in the header or false if not",
            "type": "boolean",
            "example": true
          },
          "charset": {
            "description": "File headers (CSV)",
            "type": "string",
            "example": "UTF-8",
            "readOnly": true
          }
        },
        "required": [
          "containsHeader"
        ]
      },
      "flow.batches.item": {
        "allOf": [
          {
            "$ref": "#/components/schemas/flow.batches.base"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/flow.batches.content"
                  }
                ],
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/flow.batches.file"
                  }
                }
              }
            }
          }
        ]
      },
      "flow.batches.json": {
        "title": "Flow Batch Object for request with json request.",
        "description": "This is a Flow Batch object model for request with json request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/flow.batches.base"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/flow.batches.content"
                  },
                  {
                    "type": "object",
                    "required": [
                      "fieldNames",
                      "fields"
                    ]
                  }
                ],
                "properties": {
                  "fields": {
                    "description": "A list of field values, each item refers to a contact",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "example": [
                      [
                        "5511999999999",
                        "John",
                        "Smartphone",
                        "20/07/2021"
                      ],
                      [
                        "5511911111111",
                        "Paul",
                        "Tablet",
                        "21/07/2021"
                      ]
                    ],
                    "writeOnly": true
                  }
                }
              }
            },
            "required": [
              "content"
            ]
          }
        ]
      },
      "flow.batches.multipart": {
        "title": "Flow Batch Object for request with file.",
        "description": "This is a Flow Batch object model for request with file.",
        "allOf": [
          {
            "$ref": "#/components/schemas/flow.batches.base"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/flow.batches.content"
                  }
                ],
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/flow.batches.file"
                  }
                },
                "required": [
                  "file"
                ]
              }
            },
            "required": [
              "content"
            ]
          }
        ]
      },
      "flow.batches.schedule": {
        "title": "Batch schedule",
        "description": "Schedule to the batch dispatch",
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "The schedule start date.",
            "example": "2021-08-03T16:26:23.616Z"
          },
          "end": {
            "type": "string",
            "description": "The schedule end date.",
            "example": "2021-08-03T16:26:23.616Z"
          },
          "limit": {
            "type": "string",
            "description": "The schedule limit date.",
            "example": "2021-08-03T16:26:23.616Z"
          }
        }
      },
      "message.all": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "visitor": {
                "$ref": "#/components/schemas/message.visitor"
              },
              "referral": {
                "$ref": "#/components/schemas/message.referral"
              },
              "contents": {
                "items": {
                  "$ref": "#/components/schemas/content.all"
                }
              },
              "idRef": {
                "title": "Referenced Message ID",
                "description": "When a user sends a message quoting a previous message, the identifier of the quoted message will be provided here. Also:\n* On reply button clicks (see [replyable text](#section/Replyable-Text) and [card](#section/Card) sections), this will refer to the ID of the clicked message.\n* On [SMS channel](#tag/SMS), this will refer to the ID of the last message sent to the contact.\n\n*Only applicable to [WhatsApp](#tag/WhatsApp), [Instagram](#tag/Instagram), [SMS](#tag/SMS), [Facebook](#tag/Facebook), [RCS](#tag/RCS) and [E-Mail](#tag/E-Mail) channels.*",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ]
      },
      "message.base": {
        "title": "Message Object",
        "description": "This is a Message object model",
        "type": "object",
        "properties": {
          "id": {
            "title": "Message ID",
            "description": "An ID for the message. It can be used for future message consulting or callback notifications.",
            "type": "string",
            "readOnly": true
          },
          "from": {
            "title": "Sender ID",
            "description": "The identifier of the sender of the message. The sender is created when an integration for the channel is connected\n        on the [integrations console](https://app.zenvia.com/home/credentials).\n        <br>More details on the channel's *sender and recipient* section.",
            "type": "string",
            "maxLength": 64
          },
          "to": {
            "title": "Recipient ID",
            "description": "The identifier of the recipient (varies according to the channel) of the message.\n        <br>More details on the channel's *sender and recipient* section.",
            "type": "string",
            "maxLength": 64
          },
          "direction": {
            "title": "Message direction",
            "description": "Indicates whether the message is received from a channel (IN) or sent to a channel (OUT)",
            "type": "string",
            "enum": [
              "IN",
              "OUT"
            ],
            "readOnly": true
          },
          "channel": {
            "title": "Message channel",
            "description": "Message channel",
            "type": "string",
            "readOnly": true
          },
          "contents": {
            "title": "Message Contents",
            "description": "The list of contents to be sent",
            "type": "array",
            "items": {
              "type": "object"
            },
            "minItems": 1
          },
          "timestamp": {
            "title": "Message timestamp",
            "description": "Timestamp of the message. Usually received from the provider of the channel.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "from",
          "to",
          "contents"
        ]
      },
      "message.channel": {
        "type": "string",
        "title": "Channel",
        "description": "Message channel"
      },
      "message.email": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.email.all"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "message.facebook": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.facebook.all"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "message.gbm": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.gbm.all"
                },
                "minItems": 1
              },
              "representative": {
                "$ref": "#/components/schemas/message.representative"
              }
            }
          }
        ]
      },
      "message.instagram": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.instagram.all"
                },
                "minItems": 1
              },
              "representative": {
                "$ref": "#/components/schemas/message.representative"
              }
            }
          }
        ]
      },
      "message.rcs": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.rcs.all"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "message.referral": {
        "title": "Referral Object",
        "description": "Included in notifications where it is possible to track the source of the message. Examples:\n* When a user clicks on an ad that redirects to WhatsApp and sends a message to the business\n* When a user tags the business on their Instagram story\n* When a user replies to a Instagram story from the business\n* When a user quotes an message in the Instagram direct conversation\n\n*Only applicable to [WhatsApp](#tag/WhatsApp) and [Instagram](#tag/Instagram) channels.*",
        "type": "object",
        "properties": {
          "headline": {
            "title": "Headline",
            "description": "Headline used in the ad that generated the message.\n                    <br>*Only applicable to [WhatsApp channel](#tag/WhatsApp).*",
            "type": "string",
            "example": "This is a headline"
          },
          "body": {
            "title": "Body",
            "description": "Body from the ad that generated the message.\n                    <br>*Only applicable to [WhatsApp channel](#tag/WhatsApp).*",
            "type": "string",
            "example": "This is a body"
          },
          "source": {
            "type": "object",
            "title": "Referral source",
            "description": "Provide details about the source of the message.",
            "properties": {
              "id": {
                "title": "Id",
                "description": "An id for the message source. The format of the id will depend on the source type.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "description": "The type of content where the message originated.",
                "type": "string",
                "enum": [
                  "ad",
                  "post",
                  "story_mention",
                  "sharing",
                  "story",
                  "message",
                  "live"
                ]
              },
              "url": {
                "title": "URL",
                "description": "The URL that leads to the message source. Opening this URL takes you to the content viewed by the user.",
                "type": "string",
                "example": "https://www.zenvia.com"
              },
              "text": {
                "title": "Text",
                "description": "The content of the quoted text message.\n                        <br>*Only applicable to [Instagram channel](#tag/Instagram).*",
                "type": "string"
              },
              "user": {
                "title": "User",
                "description": "The user who sent the quoted text message.\n                        <br>*Only applicable to [Instagram channel](#tag/Instagram).*",
                "type": "string"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "The timestamp of the quoted text message.\n                        <br>*Only applicable to [Instagram channel](#tag/Instagram).*",
                "type": "string"
              }
            }
          }
        }
      },
      "message.representative": {
        "title": "Representative Object",
        "description": "Provides information on the representative who sent the message.\n                <br>It is mainly meant to be used when a **human agent** is the message's sender.\n                <br><br>*Only applicable to [Instagram](#tag/Instagram), [Google Business Messages](#tag/Google-Business-Messages) and [E-Mail](#tag/E-Mail) channels.*",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "Indicates whether the message sender is a *bot* or a *human agent*.\n                    <br>The `HUMAN` value must only be used on a message coming from a **human agent**.\n                    <br><br>*Only applicable to [Instagram](#tag/Instagram) and [Google Business Messages](#tag/Google-Business-Messages) channels.*",
            "type": "string",
            "enum": [
              "BOT",
              "HUMAN"
            ],
            "default": "BOT"
          },
          "name": {
            "title": "Name",
            "description": "Representative's name shown on the message.\n                    <br>*Only applicable to [Google Business Messages](#tag/Google-Business-Messages) and [E-Mail](#tag/E-Mail) channels.*",
            "type": "string"
          },
          "picture": {
            "title": "Picture",
            "description": "URL for the avatar picture of the representative message.\n                    <br>*Only applicable to [Google Business Messages channel](#tag/Google-Business-Messages).*",
            "type": "string"
          }
        }
      },
      "message.sms": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.sms.all"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "message.telegram": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.telegram.all"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "message.visitor": {
        "title": "Visitor Object",
        "description": "It provides information about the contact who sent the message.\n                <br>The availability of this information depends on privacy settings of the contact.\n                <br><br>*Only applicable to [WhatsApp](#tag/WhatsApp), [Instagram](#tag/Instagram),\n                [Facebook](#tag/Facebook), [Telegram](#tag/Telegram), [Google Business Messages](#tag/Google-Business-Messages)\n                and [E-Mail](#tag/E-Mail) channels.*",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "description": "Full name of the contact.",
            "type": "string"
          },
          "firstName": {
            "title": "First name",
            "description": "First name of the contact.\n                    <br>*Only applicable to [WhatsApp](#tag/WhatsApp), [Facebook](#tag/Facebook) and [Telegram](#tag/Telegram) channels.*",
            "type": "string"
          },
          "lastName": {
            "title": "Last name",
            "description": "Last name of the contact.\n                    <br>*Only applicable to [WhatsApp](#tag/WhatsApp), [Facebook](#tag/Facebook) and [Telegram](#tag/Telegram) channels.*",
            "type": "string"
          },
          "userName": {
            "title": "User name",
            "description": "User name of the contact.\n                    <br>*Only applicable to [Instagram channel](#tag/Instagram).*",
            "type": "string"
          },
          "picture": {
            "title": "Picture",
            "description": "URL for the profile picture of the contact.\n                    <br>*Only applicable to [Instagram](#tag/Instagram) and [Facebook](#tag/Facebook) channels.*",
            "type": "string"
          }
        }
      },
      "message.voice": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.voice.all"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "message.whatsapp": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/message.base"
          },
          {
            "type": "object",
            "properties": {
              "contents": {
                "title": "Message Contents",
                "description": "A list of content to be sent",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/content.whatsapp.all"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "reports.flow.entries.base": {
        "title": "Entry object for Flow Report",
        "description": "The entry object model for Flow Report.",
        "type": "object",
        "properties": {
          "flowId": {
            "title": "Flow ID",
            "description": "The the flow identifier. You can view your <a href=\"https://app.zenvia.com/flows\" target=\"_blank\"> Flow IDs here.</a>",
            "type": "string"
          },
          "dispatchId": {
            "title": "Dispatch ID",
            "description": "The dispatch identifier",
            "type": "string"
          },
          "sessionId": {
            "title": "Session ID",
            "description": "An ID that represents a flow execution. In case of conversational flows, it identifies the conversation in our platform.",
            "type": "string"
          },
          "firstEventTimestamp": {
            "title": "First event timestamp",
            "description": "Time of the first event with the client",
            "type": "string"
          },
          "lastEventTimestamp": {
            "title": "Last event timestamp",
            "description": "Time of the last event with the client",
            "type": "string"
          },
          "variables": {
            "title": "Objects of varibles",
            "description": "Object where session variables are saved",
            "type": "object"
          }
        }
      },
      "reports.message.entry.base": {
        "title": "Entry object for Message Report",
        "description": "The entry object model for Message Report.",
        "type": "object",
        "properties": {
          "channel": {
            "title": "Channel",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "title": "Message type",
            "description": "The type of messages, which may be either \"message\" or \"notification\".",
            "type": "string",
            "readOnly": true
          },
          "directionInTotal": {
            "title": "IN messages total",
            "description": "The total of IN direction messages.",
            "type": "number",
            "readOnly": true
          },
          "directionOutTotal": {
            "title": "OUT messages total",
            "description": "The total of OUT direction messages.",
            "type": "number",
            "readOnly": true
          },
          "total": {
            "title": "Messages total",
            "description": "The total of messages including IN and OUT directions.",
            "type": "number",
            "readOnly": true
          }
        }
      },
      "subscription.all": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/subscription.message-subscription"
          },
          {
            "$ref": "#/components/schemas/subscription.message-status-subscription"
          }
        ],
        "discriminator": {
          "propertyName": "eventType",
          "mapping": {
            "MESSAGE": "#/components/schemas/subscription.message-subscription",
            "MESSAGE_STATUS": "#/components/schemas/subscription.message-status-subscription"
          }
        }
      },
      "subscription.base": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Subscription Id",
            "type": "string",
            "readOnly": true
          },
          "eventType": {
            "title": "Event type to subscribe",
            "type": "string",
            "enum": [
              "MESSAGE",
              "MESSAGE_STATUS"
            ]
          },
          "webhook": {
            "allOf": [
              {
                "$ref": "#/components/schemas/subscription.webhook"
              },
              {
                "type": "object",
                "required": [
                  "url"
                ]
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/subscription.status"
          },
          "version": {
            "title": "Version of subscription",
            "type": "string",
            "enum": [
              "v1",
              "v2"
            ],
            "default": "v2"
          },
          "createdAt": {
            "title": "Creation timestamp",
            "description": "Creation timestamp in ISO format",
            "type": "string",
            "readOnly": true
          },
          "updatedAt": {
            "title": "Update timestamp",
            "description": "Update timestamp in ISO format",
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "eventType",
          "webhook"
        ]
      },
      "subscription.message-status-subscription": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/subscription.base"
          },
          {
            "type": "object",
            "properties": {
              "criteria": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/message.channel"
                  }
                },
                "required": [
                  "channel"
                ]
              }
            },
            "required": [
              "criteria"
            ]
          }
        ]
      },
      "subscription.message-subscription": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/subscription.base"
          },
          {
            "type": "object",
            "properties": {
              "criteria": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/message.channel"
                  },
                  "direction": {
                    "title": "Message direction",
                    "description": "Indicates whether the message is received from a channel (IN) or sent to a channel (OUT)",
                    "type": "string",
                    "enum": [
                      "IN",
                      "OUT"
                    ]
                  }
                },
                "required": [
                  "channel"
                ]
              }
            },
            "required": [
              "criteria"
            ]
          }
        ]
      },
      "subscription.partial-subscription": {
        "type": "object",
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/subscription.webhook"
          },
          "status": {
            "$ref": "#/components/schemas/subscription.status"
          }
        }
      },
      "subscription.status": {
        "title": "Status of subscription",
        "type": "string",
        "enum": [
          "ACTIVE",
          "DEGRADED",
          "INACTIVE"
        ]
      },
      "subscription.webhook": {
        "type": "object",
        "properties": {
          "url": {
            "title": "Webhook URL",
            "description": "URL to post events",
            "type": "string"
          },
          "headers": {
            "title": "Request headers",
            "type": "object"
          }
        }
      },
      "templates.partial-template": {
        "title": "Template Object",
        "description": "This is a Template object model",
        "type": "object",
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/templates.template-locale"
          },
          "category": {
            "$ref": "#/components/schemas/templates.template-category"
          },
          "components": {
            "$ref": "#/components/schemas/templates.components.index"
          },
          "examples": {
            "$ref": "#/components/schemas/templates.template-example"
          },
          "notificationEmail": {
            "$ref": "#/components/schemas/templates.template-notification-email"
          }
        }
      },
      "templates.template-category": {
        "title": "Category",
        "description": "Category of use for this template",
        "type": "string",
        "enum": [
          "ACCOUNT_UPDATE",
          "PAYMENT_UPDATE",
          "PERSONAL_FINANCE_UPDATE",
          "SHIPPING_UPDATE",
          "RESERVATION_UPDATE",
          "ISSUE_RESOLUTION",
          "APPOINTMENT_UPDATE",
          "TRANSPORTATION_UPDATE",
          "TICKET_UPDATE",
          "ALERT_UPDATE",
          "AUTO_REPLY"
        ]
      },
      "templates.template-comment": {
        "type": "object",
        "required": [
          "author",
          "role",
          "text"
        ],
        "properties": {
          "id": {
            "title": "Comment ID",
            "type": "string",
            "readOnly": true
          },
          "author": {
            "title": "Author",
            "description": "Author",
            "type": "string"
          },
          "role": {
            "title": "Role",
            "description": "Author role",
            "type": "string",
            "enum": [
              "REQUESTER",
              "REVIEWER",
              "WHATSAPP"
            ]
          },
          "text": {
            "title": "Text",
            "description": "Comment text",
            "type": "string"
          },
          "createdAt": {
            "title": "Creation timestamp",
            "description": "Creation timestamp in ISO format",
            "type": "string",
            "readOnly": true
          },
          "updatedAt": {
            "title": "Update timestamp",
            "description": "Update timestamp in ISO format",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "templates.template-example": {
        "title": "Examples",
        "description": "Provides an example of possible model data. This helps during the review and approval process so that Facebook can understand what\n                kind of messages you plan to send. Ensure these are examples and do not include personal or confidential information.\n                In case you decide to include variables and examples, provide them with the same number.\n                <br>In case you are creating a template with media, the key must be <code>imageUrl</code>, <code>documentUrl</code> or <code>videoUrl</code>,\n                being assigned the example URL.",
        "type": "object",
        "example": {
          "imageUrl": "https://example.com/image.jpeg",
          "name": "John Smith"
        }
      },
      "templates.template-locale": {
        "title": "Locale",
        "description": "Template language and locale",
        "type": "string",
        "enum": [
          "af",
          "sq",
          "ar",
          "az",
          "bn",
          "bg",
          "ca",
          "zh_CN",
          "zh_HK",
          "zh_TW",
          "hr",
          "cs",
          "da",
          "nl",
          "en",
          "en_GB",
          "en_US",
          "et",
          "fil",
          "fi",
          "fr",
          "de",
          "el",
          "gu",
          "ha",
          "he",
          "hi",
          "hu",
          "id",
          "ga",
          "it",
          "ja",
          "kn",
          "kk",
          "ko",
          "lo",
          "lv",
          "lt",
          "mk",
          "ms",
          "ml",
          "mr",
          "nb",
          "fa",
          "pl",
          "pt_BR",
          "pt_PT",
          "pa",
          "ro",
          "ru",
          "sr",
          "sk",
          "sl",
          "es",
          "es_AR",
          "es_ES",
          "es_MX",
          "sw",
          "sv",
          "ta",
          "te",
          "th",
          "tr",
          "uk",
          "ur",
          "uz",
          "vi",
          "zu"
        ]
      },
      "templates.template-notification-email": {
        "title": "Notification e-mail",
        "description": "E-mail list (comma-separated) to send notifications about the message template approving process",
        "type": "string"
      },
      "templates.template": {
        "title": "Template Object",
        "description": "This is a Template object model",
        "type": "object",
        "required": [
          "name",
          "locale",
          "channel",
          "senderId",
          "category",
          "components"
        ],
        "properties": {
          "id": {
            "title": "Template ID",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Template name",
            "description": "The name of the template",
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/templates.template-locale"
          },
          "channel": {
            "title": "Channel",
            "description": "Channel for template use. Currently, only Whatsapp, SMS and RCS channels is allowed.",
            "type": "string",
            "enum": [
              "WHATSAPP",
              "SMS",
              "RCS"
            ]
          },
          "senderId": {
            "title": "Sender ID",
            "description": "The identifier of the sender of the template. The sender should be created with a credential.",
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/templates.template-category"
          },
          "components": {
            "$ref": "#/components/schemas/templates.components.index"
          },
          "examples": {
            "$ref": "#/components/schemas/templates.template-example"
          },
          "notificationEmail": {
            "$ref": "#/components/schemas/templates.template-notification-email"
          },
          "text": {
            "title": "Template text",
            "description": "A text reference for the template. This field encompasses all content components.",
            "type": "string",
            "readOnly": true
          },
          "fields": {
            "title": "Fields",
            "description": "The available fields to be used in this template",
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "readOnly": true
          },
          "comments": {
            "title": "Comments",
            "description": "Comments added to the template during the approval process",
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/templates.template-comment"
            }
          },
          "status": {
            "title": "Status of template",
            "type": "string",
            "readOnly": true,
            "enum": [
              "WAITING_REVIEW",
              "REJECTED",
              "WAITING_APPROVAL",
              "APPROVED"
            ]
          },
          "createdAt": {
            "title": "Creation timestamp",
            "description": "Creation timestamp in ISO format",
            "type": "string",
            "readOnly": true
          },
          "updatedAt": {
            "title": "Update timestamp",
            "description": "Update timestamp in ISO format",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "templates.components.index": {
        "title": "Components",
        "description": "Message content of this template",
        "type": "object",
        "required": [
          "body"
        ],
        "properties": {
          "header": {
            "$ref": "#/components/schemas/templates.components.header.index"
          },
          "body": {
            "$ref": "#/components/schemas/templates.components.body.index"
          },
          "footer": {
            "$ref": "#/components/schemas/templates.components.footer.index"
          },
          "buttons": {
            "$ref": "#/components/schemas/templates.components.buttons.index"
          }
        }
      },
      "templates.components.body.index": {
        "title": "Body",
        "description": "Template body",
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "title": "Body type",
            "description": "The body should have a fixed or variable text. Variable text can have variables using format _{{var_name}}_",
            "type": "string",
            "enum": [
              "TEXT_FIXED",
              "TEXT_TEMPLATE"
            ]
          },
          "text": {
            "title": "Body text",
            "type": "string"
          }
        }
      },
      "templates.components.buttons.actions": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/templates.components.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "title": "Buttons",
                "description": "List of buttons. Only one URL and phone number can be sent",
                "maxItems": 2,
                "type": "array",
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/templates.components.buttons.button-item-url"
                    },
                    {
                      "$ref": "#/components/schemas/templates.components.buttons.button-item-phone-number"
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "URL": "#/components/schemas/templates.components.buttons.button-item-url",
                      "PHONE_NUMBER": "#/components/schemas/templates.components.buttons.button-item-phone-number"
                    }
                  }
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "templates.components.buttons.base": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Content type",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "templates.components.buttons.button-item-base": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Button type",
            "enum": [
              "URL",
              "PHONE_NUMBER",
              "QUICK_REPLY"
            ],
            "type": "string"
          },
          "text": {
            "title": "Button text",
            "type": "string"
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "templates.components.buttons.button-item-phone-number": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/templates.components.buttons.button-item-base"
          },
          {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "title": "Phone number of button",
                "description": "Phone number to be sent in the button",
                "type": "string"
              }
            },
            "required": [
              "type",
              "text",
              "phoneNumber"
            ]
          }
        ]
      },
      "templates.components.buttons.button-item-quick-reply": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/templates.components.buttons.button-item-base"
          },
          {
            "type": "object",
            "properties": {
              "payload": {
                "type": "string",
                "title": "Payload of button",
                "description": "This payload is used for identify the click in the callback"
              }
            },
            "required": [
              "type",
              "text",
              "payload"
            ]
          }
        ]
      },
      "templates.components.buttons.button-item-url": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/templates.components.buttons.button-item-base"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "title": "URL of button",
                "description": "URL to be sent in the button. It can be dynamic",
                "type": "string"
              }
            },
            "required": [
              "type",
              "text",
              "url"
            ]
          }
        ]
      },
      "templates.components.buttons.index": {
        "title": "Buttons",
        "description": "Template buttons\n\n*Only applicable to [WhatsApp](#tag/WhatsApp) and [RCS](#tag/RCS) channels.*",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/templates.components.buttons.actions"
          },
          {
            "$ref": "#/components/schemas/templates.components.buttons.quick-replies"
          },
          {
            "$ref": "#/components/schemas/templates.components.buttons.mixed"
          }
        ],
        "required": [
          "type"
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ACTIONS": "#/components/schemas/templates.components.buttons.actions",
            "QUICK_REPLIES": "#/components/schemas/templates.components.buttons.quick-replies",
            "MIXED": "#/components/schemas/templates.components.buttons.mixed"
          }
        }
      },
      "templates.components.buttons.mixed": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/templates.components.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "title": "Buttons",
                "description": "List of buttons. Currently, only [RCS](#tag/RCS) channel is allowed. it is allowed to mix the 3 types of buttons, with a limit of up to 11 buttons.",
                "maxItems": 11,
                "type": "array",
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/templates.components.buttons.button-item-url"
                    },
                    {
                      "$ref": "#/components/schemas/templates.components.buttons.button-item-phone-number"
                    },
                    {
                      "$ref": "#/components/schemas/templates.components.buttons.button-item-quick-reply"
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "URL": "#/components/schemas/templates.components.buttons.button-item-url",
                      "PHONE_NUMBER": "#/components/schemas/templates.components.buttons.button-item-phone-number",
                      "QUICK_REPLY": "#/components/schemas/templates.components.buttons.button-item-quick-reply"
                    }
                  }
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "templates.components.buttons.quick-replies": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/templates.components.buttons.base"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "title": "Buttons",
                "description": "List of buttons",
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/templates.components.buttons.button-item-quick-reply"
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "QUICK_REPLY": "#/components/schemas/templates.components.buttons.button-item-quick-reply"
                    }
                  }
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "templates.components.footer.index": {
        "title": "Footer",
        "description": "Template footer\n\n*Only applicable to [WhatsApp](#tag/WhatsApp) and [RCS](#tag/RCS) channels.*",
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "title": "Footer type",
            "description": "The footer can only be a fixed text",
            "type": "string",
            "enum": [
              "TEXT_FIXED"
            ]
          },
          "text": {
            "title": "Footer text",
            "type": "string"
          }
        }
      },
      "templates.components.header.index": {
        "title": "Header",
        "description": "Template header\n\n*Only applicable to [WhatsApp](#tag/WhatsApp) and [RCS](#tag/RCS) channels.*",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "title": "Header type",
            "description": "The header can have an image, document or text.",
            "type": "string",
            "enum": [
              "MEDIA_DOCUMENT",
              "MEDIA_IMAGE",
              "MEDIA_VIDEO",
              "TEXT_FIXED",
              "TEXT_TEMPLATE"
            ]
          },
          "text": {
            "title": "Header text",
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "error": {
        "description": "Error response. See the [Error Handling](#section/Error-Handling) section for details.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error.base"
            }
          }
        }
      }
    },
    "parameters": {
      "chatbotId": {
        "name": "chatbotId",
        "in": "path",
        "required": true,
        "description": "the chatbot identifier",
        "schema": {
          "type": "string"
        }
      },
      "flowBatchId": {
        "name": "flowBatchId",
        "in": "path",
        "required": true,
        "description": "Flow Batch identifier",
        "schema": {
          "type": "string"
        },
        "example": "b5agf1-y237-11e8-b127-1230f6c2d98m"
      },
      "flowId": {
        "name": "flowId",
        "in": "query",
        "required": true,
        "description": "The the flow identifier. You can view your <a href=\"https://app.zenvia.com/flows\" target=\"_blank\"> Flow IDs here.</a>",
        "schema": {
          "type": "string"
        },
        "example": "b5agf1-y237-11e8-b127-1230f6c2d98m"
      },
      "page": {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "This is the page number. Default is 0.",
        "schema": {
          "title": "page",
          "type": "number"
        },
        "example": 5
      },
      "size": {
        "name": "size",
        "in": "query",
        "required": false,
        "description": "This is the page size. Default is 20.",
        "schema": {
          "title": "size",
          "type": "number"
        },
        "example": 10
      },
      "subscriptionId": {
        "name": "subscriptionId",
        "in": "path",
        "required": true,
        "description": "The subscription identifier",
        "schema": {
          "type": "string"
        }
      },
      "templateCommentId": {
        "name": "templateCommentId",
        "in": "path",
        "required": true,
        "description": "The comment identifier",
        "schema": {
          "type": "string"
        }
      },
      "templateId": {
        "name": "templateId",
        "in": "path",
        "required": true,
        "description": "The <a href=\"https://app.zenvia.com/home/templates\">template identifier</a>",
        "schema": {
          "type": "string"
        }
      },
      "files.endTimestamp": {
        "name": "endTimestamp",
        "in": "query",
        "required": false,
        "description": "Timestamp after which, the files to be returned, were created",
        "schema": {
          "type": "string"
        },
        "example": "2022-02-21T12:30:45Z"
      },
      "files.fileId": {
        "name": "fileId",
        "in": "path",
        "required": true,
        "description": "The file identifier",
        "schema": {
          "type": "string"
        }
      },
      "files.limit": {
        "name": "limit",
        "in": "query",
        "description": "The maximum amount of files to be returned.",
        "schema": {
          "type": "integer",
          "default": 1000,
          "maximum": 10000,
          "minimum": 1
        }
      },
      "files.startTimestamp": {
        "name": "startTimestamp",
        "in": "query",
        "required": false,
        "description": "Timestamp after which, the files to be returned, were created",
        "schema": {
          "type": "string"
        },
        "example": "2022-02-21T10:30:25Z"
      },
      "reports.flow.dispatchId": {
        "name": "dispatchId",
        "in": "query",
        "required": false,
        "description": "The ID generated at the time of the dispatch",
        "schema": {
          "title": "Dispatch ID",
          "type": "string"
        }
      },
      "reports.flow.endDate": {
        "name": "endDate",
        "in": "query",
        "required": false,
        "description": "The end date for query entries",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "reports.flow.flowId": {
        "name": "flowId",
        "in": "query",
        "required": false,
        "description": "The the flow identifier. You can view your <a href=\"https://app.zenvia.com/flows\" target=\"_blank\"> Flow IDs here.</a>",
        "schema": {
          "title": "Flow ID",
          "type": "string"
        }
      },
      "reports.flow.sessionId": {
        "name": "sessionId",
        "in": "query",
        "required": false,
        "description": "An ID that represents a flow execution. In case of conversational flows, it identifies the conversation in our platform.",
        "schema": {
          "title": "Session ID",
          "type": "string"
        }
      },
      "reports.flow.startDate": {
        "name": "startDate",
        "in": "query",
        "required": true,
        "description": "The start date for query entries",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "reports.message.channels": {
        "name": "channels",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of the channels identifier",
        "schema": {
          "type": "string"
        }
      },
      "reports.message.endDate": {
        "name": "endDate",
        "in": "query",
        "required": true,
        "description": "The end date for query entries",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "reports.message.startDate": {
        "name": "startDate",
        "in": "query",
        "required": true,
        "description": "The start date for query entries",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "reports.message.type": {
        "name": "type",
        "in": "query",
        "required": false,
        "description": "The type of the messages",
        "schema": {
          "type": "string",
          "enum": [
            "message",
            "notification"
          ]
        }
      },
      "templates.channel": {
        "name": "channel",
        "in": "query",
        "required": false,
        "description": "Filter by channel",
        "schema": {
          "type": "string",
          "enum": [
            "WHATSAPP",
            "SMS",
            "RCS"
          ]
        },
        "example": "WHATSAPP"
      },
      "templates.senderId": {
        "name": "senderId",
        "in": "query",
        "required": false,
        "description": "Filter by senderId",
        "schema": {
          "type": "string"
        },
        "example": "b5agf1-y237-11e8-b127-1230f6c2d98m"
      },
      "templates.status": {
        "name": "status",
        "in": "query",
        "description": "Filter by status",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "WAITING_REVIEW",
            "REJECTED",
            "WAITING_APPROVAL",
            "APPROVED"
          ]
        },
        "example": "APPROVED"
      }
    },
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "JWT": {
        "description": "User JWT token used for Zenvia front-end service",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "TOKEN": {
        "description": "Token created on API console for clients using server to server integration",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-TOKEN"
      }
    },
    "links": {},
    "callbacks": {
      "subscription-event": {
        "{$request.body#/webhook/url}": {
          "post": {
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/events.all"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "webhook successfully processed and no retries will be performed"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "JWT": []
    },
    {
      "TOKEN": []
    }
  ],
  "tags": [
    {
      "name": "Content types",
      "description": "## Supported Channels\n\nFor each content type covered in the next section, the following table reflects the usability concerning the each Zenvia-supported channel:\n\n|Content Type    |SMS                                |Facebook                           |WhatsApp                           |RCS                                |Voice                              |Telegram                           |GBM*                               |Instagram                          |E-Mail                             |\n|:---------------|:----------------------------------|:----------------------------------|:----------------------------------|:----------------------------------|:----------------------------------|:----------------------------------|:----------------------------------|:----------------------------------|:----------------------------------|\n| text           |<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|\n| file           |<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|\n| replyable_text |<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|\n| contacts       |<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| location       |<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| template       |<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"green\"  >&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| card           |<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| carousel       |<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| button         |<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| list           |<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| call           |<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|\n| email          |<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"red\"  >&#10005;</font>|<font color=\"green\">&#10004;</font>|\n\n_*GBM stands for Google Business Messages_\n\n## Text\nThis type of content is the most used one and is composed of plain text.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.text\" showReadOnly={false} />\n\n## File\nThis type of content is used to send a file to the user. Depending on the file type, the file itself will be displayed with a different appearance. There are four types of presentation:\n* Image\n* Video\n* Audio\n* Document\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.file\" />\n\n## Replyable Text\nThis is the same as [text](#section/Text) content, but is followed by buttons for quick replying.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.replyable-text\" showReadOnly={false} />\n\n## Contacts\nThis type of content is used to send contact information to the user.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.contacts\" />\n\n## Location\nThis type of content is used to send location messages represented as a point on the map to the user.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.location\" />\n\n## Template\nThis type of content has an underlying fixed text content with some required variables. With the fields of the template properly filled, the template must be submitted for approval. This approval depends solely on WhatsApp, and the criteria are strict.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.template\" />\n\n### Submitting a template content for approval\nYou may submit templates for approval using our [template console](https://app.zenvia.com/home/templates) if you already own a WhatsApp Business account with us.\n\n## Card\nThis type of content is rich and is composed of *at least one* of the following components (none of them are mandatory):\n* Media\n* Title\n* Text\n\nAdditionally, it may include:\n* Buttons\n* Quick reply buttons (not part of the card itself, but are instead shown below it)\n\nMore information on each attribute may be found below:\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.card\" />\n\n## Carousel\nThis type of content displays a horizontally scrollable sequence of [cards](#section/Card), with some differences and limitations.\n\nMore details may be found below.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.carousel\" />\n\n## WhatsApp buttons\n<SchemaDefinition schemaRef=\"#/components/schemas/content.whatsapp.button.index\" />\n\n## WhatsApp list\n<SchemaDefinition schemaRef=\"#/components/schemas/content.whatsapp.list\" />\n\n## Call\nThis is the [Voice channel](#tag/Voice) channel content.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.call\" showReadOnly={false} showWriteOnly={true} />\n\n## E-Mail\nThis is the [E-Mail channel](#tag/E-Mail) content.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.email\" showReadOnly={false} showWriteOnly={true} />\n\n## SMS Text\nThis the SMS version of the [text](#section/Text) content. It has additional parameters specific to the SMS integration.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content.sms.text\" showReadOnly={false} showWriteOnly={true} />\n"
    },
    {
      "name": "SMS",
      "description": "The SMS channel may be used after its activation on [Zenvia platform](https://app.zenvia.com/home/credentials).\n<br/>\n\n**Get in touch with Zenvia consultants to create your account.**\n\nWebhooks allow you to receive events in the configured URL. [Learn more here](#tag/Webhooks).\n\n## SMS limitations\n\n### SMS lenght\nA SMS has a maximum lenght of 140 bytes, which can be used either with the standard encoding, which supports 160 characters (7 bits each),\nor using an unicode encoding, which supports 70 characters (16 bits each).\n\n### Character support\nThe standard encoding supports around 110 different characters, while the unicode encoding supports around 65500 characters.\n<br>Here are *some* examples of characters which are **only** supported by the unicode encoding:\n<br>`çÇáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙãõñäëïöüÿÄËÏÖÜÃÕÑâêîôûÂÊÎÔÛºª°|`\n\n### Encoding selection\nBy default, our API selects automatically the SMS encoding based on the message content. However, it is also possible to enforce an `encoding strategy`.\nMore details can be found in the [SMS Text](#section/SMS-Text) section.\n\n### Concatenated SMS\nTo overcome the SMS size limitation, cellphone manufactures developed a feature called `concatenated SMS`.\n<br>This allows a long message to be break down into multiple SMS messages for delivery, which are joined back together by the cellphone SMS application.\n\nTherefore, when a message is longer than 160 characters in the standard encoding or 70 characters in the unicode encoding, this feature will automatically\nbe applied.\n\nImportant things to keep in mind:\n* Longer messages means more cost, because they actually are multiple messages.\n* To identify each piece of the message, some bytes are used as a header in this feature, so each message piece is shorter than a single short message:\nup to 152 characters in the standard encoding and up to 66 characters in the unicode encoding. And the cut point is always a space, so some pieces might be\nsmaller than this.\n* Not all carriers support this feature. The bigest carriers support it, namely: Vivo, Claro, Tim and Oi.\n* Double spaces and tabs will always be replaced by a single space.\n* To send long messages it might be necessary to contact our service team and request that this feature be enabled on your account.\n* The maximum length currently supported is 1520 characters\n\n## SMS sender and recipient\n\nWhen you send a message to a contact using SMS channel:\n\n* Recipient: the complete phone number (including country code) of the contact.\n* Sender: the SMS account alias connected on [Zenvia platform](https://app.zenvia.com/home/credentials).\n\nWhen you receive a message from a contact, the sender and recipient are inverted:\n\n* Recipient: the SMS account alias connected on [Zenvia platform](https://app.zenvia.com/home/credentials).\n* Sender: the complete phone number (including country code) of the contact.\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "WhatsApp",
      "description": "The WhatsApp channel may be used after its activation on [Zenvia platform](https://app.zenvia.com/home/credentials/whatsapp/list).\n\nTo activate WhatsApp you a need a registered number on WhatsApp Business API and an account registered on Zenvia platform.\n\n**Get in touch with Zenvia consultants to create your account.**\n\nWebhooks allow you to receive events in the configured URL. [Learn more here.](#tag/Webhooks)\n\n\n## WhatsApp limitations\n\nThe WhatsApp API has some limitations:\n\n* To start a conversation with someone you need a specific type of message caled [a template message](#section/Template), which requires approval before being used.\n\n* Messages not being as template content type, can only be delivered inside a 24-hour window since the last sent message by the client to the company.\n\n* When sending PNG images with a **transparent background**, you can get an unexpected final result due to the image processing performed by WhatsApp in order to convert the image to JPEG.\n\n<br>\nSupported content types and sizes:\n\n| Media | Content Type | Post-Processing Media Size* |\n|---|---|---|\n| document | Any valid MIME type. | 100&nbsp;MB |\n| image | image/jpeg<br>image/png | 5 MB |\n| sticker | image/webp<br>**Note:** Animated sticker is not supported.  | 100 KB |\n| audio | audio/acc<br>audio/mp4<br>audio/amr<br>audio/mpeg<br>audio/ogg; codecs=opus<br>**Note:** The base audio/ogg type is not supported. | 16 MB |\n| video | video/mp4<br>video/3gpp<br>**Notes:** <ul><li>Only H.264 video codec and AAC audio codec is supported.</li><li>Only videos with a single audio stream are supported.</li></ul> | 16 MB |\n\n*The size of the media file after encryption. The maximum file size for media that can be uploaded is 64MB.\n\n## WhatsApp sender and recipient\n\nWhen you send a message to a contact using WhatsApp channel:\n\n* Recipient: the phone number of the contact\n* Sender: the WhatsApp sender id registered on [Zenvia platform](https://app.zenvia.com/home/credentials/whatsapp/list)\n\nWhen you receive a message from a contact, the sender and recipient are inverted:\n\n* Recipient: the WhatsApp sender id registered on [Zenvia platform](https://app.zenvia.com/home/credentials/whatsapp/list)\n* Sender: the phone number of the contact\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "Facebook",
      "description": "The Facebook channel may be used after you connect a Facebook page on [Zenvia platform](https://app.zenvia.com/home/credentials/facebook/list).\n\n\n## Facebook limitations\n\nTo be able to send messages to a contact, you first need to setup a webhook, which will allow you to receive events in the configured URL. [Learn more here](#tag/Webhooks).\n\n\n## Facebook sender and recipient\n\nWhen you receive a message from a contact from Facebook channel:\n\n* Recipient: your Facebook page id\n* Sender: the contact id on your Facebook page (PSID - page scoped id)\n\nWhen you send some message to a contact, the sender and recipient are inverted:\n\n* Recipient: the contact id on your Facebook page (PSID - page scoped id)\n* Sender: your Facebook page id\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "Instagram",
      "description": "The Instagram channel may be used after its activation on Zenvia Platform.\n\n**Get in touch with Zenvia consultants to connect your account.**\n\n\n## Instagram limitations\n\nTo be able to send messages to a contact, you first need to setup a webhook, which will allow you to receive events in the configured URL. [Learn more here](#tag/Webhooks).\n\n* The response window is *24 hours*, with the exception when a human agent is replying the contact, then the response window is increased to 7 days.\n\nThe Instagram API content type and size limitations for sending media:\n\n| Media | Content Type | Media Size |\n|---|---|---|\n| image | image/jpeg<br>image/png<br>image/ico<br>image/bmp<br>image/webp<br>image/* | 8 MB |\n| audio | audio/* | *Currently not supported* |\n| video | video/* | *Currently not supported* |\n| document | Any other valid MIME type. | *Currently not supported* |\n\n\n## Instagram sender and recipient\n\nWhen you receive a message from a contact from Instagram channel:\n\n* Recipient: your Instagram account id (not your account @)\n* Sender: the contact id on your account (not the contact @ and it will differ across accounts)\n\nWhen you send a message to a contact, the sender and recipient are inverted:\n\n* Recipient: the contact id on your account (not the contact @ and it will differ across accounts)\n* Sender: your Instagram account id (not your account @)\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "Google Business Messages",
      "description": "The Google Business Messages channel may be used after its activation on [Zenvia platform](https://app.zenvia.com/home/credentials/google-business-messages/list).\n\nTo activate Google Business Messages you need to be registered as a partner with Google Business Messages and get an account information configured on Zenvia platform.\n\n**Get in touch with Zenvia consultants to create your account.**\n\n\n## Google Business Messages limitations\n\nTo be able to send messages to a contact, you first need to setup a webhook, which allows you to receive events in the configured URL. [Learn more here](#tag/Webhooks).\n\n\n## Google Business Messages sender and recipient\n\nWhen you receive a message from a contact from Google Business Messages channel:\n\n* Sender: the agent id configured on [Zenvia platform](https://app.zenvia.com/home/credentials/google-business-messages/list)\n* Recipient: the contact id\n\nWhen you send a message to a contact, the sender and recipient are inverted:\n\n* Recipient: the contact id\n* Sender: the agent id configured on [Zenvia platform](https://app.zenvia.com/home/credentials/google-business-messages/list)\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "RCS",
      "description": "The RCS channel may be used after its activation on [Zenvia platform](https://app.zenvia.com/home/credentials/rcs/list).\n\n**Get in touch with Zenvia consultants to create your Google agent (a conversational entity that interacts with users by sending messages and reacting to users' responses).**\n\nWebhooks allow you to receive events in the configured URL. [Learn more here](#tag/Webhooks).\n\n\n## RCS limitations\n\nThe RCS channel is compatible only with Android smartphones with 8.0 version (Oreo) or above.\n\nTo enable RCS on an Android device, you can configure it with pre-release versions of the Messages and Carrier Services apps that connect it to an RCS backend.\n\nThe use of RCS channel follows Google's content policies, available through this link: https://developers.google.com/business-communications/rcs-business-messaging/support/tos.\n\n\n## RCS sender and recipient\n\nWhen you send a message to a contact using RCS channel:\n\n* Recipient: the phone number of the contact\n* Sender: the agent id configured on [Zenvia platform](https://app.zenvia.com/home/credentials/rcs/list)\n\nWhen you receive a message from a contact, the sender and recipient are inverted:\n\n* Recipient: the agent id configured on [Zenvia platform](https://app.zenvia.com/home/credentials/rcs/list)\n* Sender: the phone number of the contact\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "Telegram",
      "description": "The Telegram can be used after its activation on [Zenvia platform](https://app.zenvia.com/home/credentials/telegram/list).\n\n**To activate Telegram you a need a registered Bot account on Telegram Bot API and an account enabled on Zenvia platform.**\n\n\n## Telegram limitations\n\nTo be able to send messages to a contact, you first need to setup a webhook, which allows you to receive events in the configured URL. [Learn more here](#tag/Webhooks).\n\nSupported content types and sizes:\n\n| Media | Content Type | Size |\n|---|---|---|\n| image | image/* | 5&nbsp;MB |\n| video | video/* | 20&nbsp;MB |\n| audio | audio/* | 20&nbsp;MB |\n| document | Any other valid MIME type. | 20&nbsp;MB |\n\n\n## Telegram sender and recipient\n\nWhen you receive a message from a contact from Telegram channel:\n\n* Recipient: the Telegram bot username enabled on Zenvia platform://app.zenvia.com/home/credentials/telegram/list)\n* Sender: the conversation id (not the phone number)\n\nWhen you send a message to a contact, the sender and recipient are inverted:\n\n* Recipient: the conversation id (not the phone number)\n* Sender: the Telegram bot username enabled on Zenvia platform://app.zenvia.com/home/credentials/telegram/list)\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "Voice",
      "description": "To access the Voice channel, you need to create your account here:\nhttps://voice-app.zenvia.com/painel/signup.php.\n\nOnce the account is created, you can get your voice access token on your voice panel homepage: https://voice-app.zenvia.com/painel/\n\nThe voice channel will be available for use after you connect a voice access token on [Zenvia platform](https://app.zenvia.com/home/credentials).\n\n**Get in touch with Zenvia consultants to create your account.**\n\nWebhooks allow you to receive status in the configured URL. [Learn more here.](#tag/Webhooks)\n\n\n## Voice limitations\n\nSupported content types and sizes:\n\n| Media | Content Type | Size |\n|---|---|---|\n| audio | audio/mp3<br>audio/wav | 5&nbsp;MB |\n\n## Voice sender and recipient\n\nWhen you send a voice message to a contact using Voice channel:\n\n* Recipient: the phone number of the contact\n* Sender: the sender id registered on [Zenvia platform](https://app.zenvia.com/home/credentials)\n\nWhen you receive a voice message from a contact, the sender and recipient are inverted:\n\n* Recipient: the sender id registered on [Zenvia platform](https://app.zenvia.com/home/credentials)\n* Sender: the phone number of the contact\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of the message object.\n"
    },
    {
      "name": "E-Mail",
      "description": "The E-mail channel may be used after its activation on [Zenvia platform](https://app.zenvia.com/home/credentials/email/list).\n<br/>\n\nWebhooks allow you to receive events in the configured URL. [Learn more here](#tag/Webhooks).\n\n## E-Mail limitations\n\nYou either can use one of the Zenvia domains provided in the e-mail activation console, or you can use your own domain.\n\nHowever, to use your domain, your will need to change or create DNS entries to make this possible.\n\nHow to do this will be described in the e-mail activation console [Zenvia platform](https://app.zenvia.com/home/credentials/email/list)\n\n<br>\nSupported content types and sizes:\n\n| Media | Content Type | E-Mail Size* |\n|---|---|---|\n| document | Any valid MIME type. | 25&nbsp;MB |\n\n*The maximum size is for the entire e-mail.\n\n\n## SMS sender and recipient\n\nWhen you send a message to a contact using SMS channel:\n\n* Recipient: the e-mail address of the contact.\n* Sender: the e-mail address connected on [Zenvia platform](https://app.zenvia.com/home/credentials/email/list).\n\nWhen you receive a message from a contact, the sender and recipient are inverted:\n\n* Recipient: the e-mail address connected on [Zenvia platform](https://app.zenvia.com/home/credentials/email/list).\n* Sender: the e-mail address of the contact.\n\nThe sender goes in the attribute `from` and the receiver goes in the attribute `to` of message object.\n"
    },
    {
      "name": "Flow Batches",
      "description": "The flow-batches api makes it possible to dispatch a active Flow with one or more contents to multiple contacts at once.\n\nTo perform these operations, you will need your flowId and you can find it <a href=\"https://app.zenvia.com/flows\" target=\"_blank\">here</a>.\n"
    },
    {
      "name": "Message Batches",
      "description": "The batch API makes it possible to send a message with one or more contents to multiple contacts at once. The channels can be used after activation on the [Zenvia platform](https://app.zenvia.com/home/credentials).\n\nThe supported channels are SMS and WhatsApp.\n\n| Content Type | SMS | WhatsApp |\n|---|:---:|:---:|\n| text | &#10004; | &#10005; |\n| template | &#10005; | &#10004; |\n\n> To send batch through WhatsApp channel, you must have a template message, which needs an approval before being used.\n\n### What you need to know about the contacts file\n\n* The file must be in **.csv** format;\n* The maximum file size is **50MB**;\n* The mandatory delimiter to be used between the values ​​is the **semicolon (\";\")**;\n* The first line of the file is dedicated to the header. There must be a column that contains the recipients' phone numbers. If your content has variables, there must be corresponding columns.\n"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks allow you to receive events in the configured URL. The available type of events are **MESSAGE** and **MESSAGE_STATUS**.\n\n## MESSAGE\n\nThe event type MESSAGE refers to messages dispatched and/or received in the desired channel.\n\nWhen you are subscribed to this type of event, your webhook will receive a request with the schema as follows:\n\n<SchemaDefinition schemaRef=\"#/components/schemas/events.message-event\" />\n\n## MESSAGE_STATUS\n\nThe event type MESSAGE_STATUS refers to a status update related to a previously sent message.\n\nIf you are subscribed to this type of event, your webhook will receive a request with the schema as follows:\n\n<SchemaDefinition schemaRef=\"#/components/schemas/events.message-status-event\" />\n<br>\n\n### Code field\nThe <code>code</code> field may assume the following values:\n* **SENT**: the message sent by your business was received by the provider's server\n* **REJECTED**: the message sent by your business has failed to be sent to the provider's server\n* **DELIVERED**: the message sent by your business was delivered to the user's device\n* **NOT_DELIVERED**: the message sent by your business failed to be sent to the user's device. The reason for the failure will be included in the <code>causes</code> field.\n* **READ**: the message sent by your business was read by the user. This status might not be sent, since it depends on the channel and the user's device configuration.\n* **DELETED**: the message sent by the user was deleted by the user. Support varies according to the channel.\n* **CLICKED**: an action item (like a link or a dial action) in the message has been clicked by the user. The payload of item clicked will be included in the <code>causes</code> field. Support varies according to the channel.\n* **VERIFIED**: The message sent by your business was delivered, and the device app acknowledged the sender as verified. Support varies according to the channel.\n<br><br>\n\n### Description field\nThe <code>description</code> field is directly tied to the <code>code</code> field, and it may assume the following values:\n* *SENT: \"**The message has been forwarded to the provider**\".*\n* *DELIVERED: \"**The message has been delivered by the provider**\".*\n* *READ: \"**The message has been read by the recipient**\".*\n* *REJECTED: \"**The message was rejected by the provider**\".*\n* *NOT_DELIVERED: \"**The provider was unable to deliver the message.**\"*\n* *DELETED: \"**The message has been deleted by the contact**\".*\n* *CLICKED: \"**An action item in the message has been clicked by the contact**\".*\n* *VERIFIED: \"**The message has been verified by the device app/provider**\".*\n\n\n\n## Zenvia outbound IP addresses\n\nWebhook notifications sent from Zenvia come from any of the following ranges of IP addresses:\n\n* 45.233.20.0/24\n* 45.233.22.0/24\n* 45.233.23.0/24\n* 3.233.231.228/32\n\n## Webhook request error handling\nAs described before, webhooks allow you to receive events in your application.\n\nHowever, if a webhook request fails, a retry procedure begins. This procedure abides by the following rules\n* There will be at least 30 seconds between each request attempt for the same event\n* There will be at most 30 request attempts for the same event\n\nThis means that a single event may be retried for around 15 minutes. Following this, the event will no longer be available.\n\nEvent retries are handled separately from the initial request. This ensures that webhooks without request fails are not penalized by webhooks with many requests fails.\n<br/><br/>\n\n### Webhook (quality) status handling\nMultiple errors on a single webhook may change its (quality) status. The possible webhook statuses are:\n* **ACTIVE**: the initial status for every webhook created\n* **DEGRADED**: once some criteria are met, an *ACTIVE* webhook will be demoted to *DEGRADED*.\n<br>Event requests for *DEGRADED* webhooks are handled separately from *ACTIVE* webhooks.\n<br>This ensures that high-quality webhooks are not penalized by the handling of low-quality webhooks.\n* **INACTIVE**: once some other criteria are, a *DEGRADED* webhook will be demoted to *INACTIVE*.\nEvents no longer will be posted on webhooks with an *INACTIVE* status.\n\nThe criteria which trigger status changes consist of the following:\n* 10 consecutive request fails on an *ACTIVE* webhook will result in demotion to *DEGRADED*\n* 500 consecutive request fails will result in demotion to *INACTIVE*.\n  * Responses slower than *1 second* also count as a fail and may result in status demotion\n    * Only slow responses on the initial request count as a fail\n    * Only slow responses on an *ACTIVE* webhook count as a fail.\n     <br>Therefore, slow responses should never result in demotion to *INACTIVE*.\n  * All connection timeouts count as fail and may result in status demotion.\n    <br>The connection timeout is *8 seconds*.\n  * All response (read) timeouts count as a fail and may result in status demotion.\n    <br>The response timeout is *8 seconds*.\n* 50 consecutive successful requests on a *DEGRADED* webhook are necessary for promotion back to *ACTIVE*\n  * Successful requests on retry attempts also count toward status promotion\n  * Responses slower than *1 second* do not count either as a success or as a fail\n* Any manual update done to the webhook on the [API console](https://app.zenvia.com/home/api) will automatically\npromote either a *DEGRADED* or an *INACTIVE* webhook back to *ACTIVE*.\n\nBoth the success and fail counters automatically reset themselves *8 hours* after the first increment.\n"
    },
    {
      "name": "Templates",
      "description": "Message Templates are message formats used for common reusable messages a business may want to send. Businesses must use Message Templates for sending notifications to customers.\n\nThis allows a business to send just the template identifier along with the appropriate parameters instead of the whole message content.\n\nTemplates have the following components:\n* Header\n* Body\n* Footer\n* Buttons\n\nThe components object allows you to indicate the type of message and the message's parameters.\n\n## Standard message templates\n\nThe standard message templates allows you to send plain text-only messages using a <code>body</code> components object.\n\n## Media message templates\n\nMedia message templates expand the outgoing content beyond the standard message template type to include media, headers, and footers using a <code>header</code> and <code>footer</code> components object.\n\n## Interactive message templates\n\nInteractive message templates expand the outgoing content beyond the standard message template and media messages template types to include interactive buttons using the <code>button</code> components object.\n\nThere are three types of predefined buttons offered: actions, quick replies and mixed.\n\n### ACTIONS\n\nAllows your customer to call a phone number and visit a website.\n\n### QUICK REPLIES\n\nAllows your customer to return a simple text message.\n\nWhen a quick reply message is sent, and the customer clicks one of the options, your webhook will receive a `MESSAGE_EVENT`, provided you've subscribed to that kind of event. The `MESSAGE_EVENT` itself will contain one content of type `text` with the <code>text</code> and <code>payload</code> fields defined in the creation of interactive templates.\n\nYou can learn more about it on the [subscriptions section](#section/MESSAGE).\n\n### MIXED\n\nAllows that in RCS messages you can mix buttons like ACTIONS and QUICK REPLIES.\n"
    },
    {
      "name": "Message Report",
      "description": "A report that shows all messages sent and received during a period. It may also be filtered by channel or type.\n"
    },
    {
      "name": "Flow Report",
      "description": "A report that provides the current state of sessions (executions) of flows for a specific time frame. These states contain session variables and their current value. The report can be filtered by flow, dispatch, or session.\n"
    },
    {
      "name": "Files",
      "description": "This allows the storage files for later use elsewhere, usually for sending messages.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Messaging",
      "tags": [
        "Content types",
        "SMS",
        "WhatsApp",
        "Instagram",
        "Facebook",
        "RCS",
        "Telegram",
        "Google Business Messages",
        "Voice",
        "E-Mail",
        "Message Batches"
      ]
    },
    {
      "name": "Webhooks",
      "tags": [
        "Webhooks"
      ]
    },
    {
      "name": "Templates",
      "tags": [
        "Templates"
      ]
    },
    {
      "name": "File Storage",
      "tags": [
        "Files"
      ]
    },
    {
      "name": "Flow",
      "tags": [
        "Flow Batches"
      ]
    },
    {
      "name": "Reports",
      "tags": [
        "Message Report",
        "Flow Report"
      ]
    }
  ]
}